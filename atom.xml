<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>年轻就要不停的奔跑</title>
  <icon>https://www.gravatar.com/avatar/47dc4736b429c1759a556989c257c1c6</icon>
  <subtitle>不爱代码爱妹子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shiyachuang.github.io/"/>
  <updated>2017-11-17T07:20:46.000Z</updated>
  <id>https://shiyachuang.github.io/</id>
  
  <author>
    <name>Chuang</name>
    <email>shiyachuang@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10月总结</title>
    <link href="https://shiyachuang.github.io/2017/10/29/10%E6%9C%88%E6%80%BB%E7%BB%93/"/>
    <id>https://shiyachuang.github.io/2017/10/29/10月总结/</id>
    <published>2017-10-28T16:00:00.000Z</published>
    <updated>2017-11-17T07:20:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>10月匆匆过去了，天气也逐渐开始变冷，10月份收获了很多。<br>交了很多的新朋友，也向了一个心仪的女生表白，虽然失败了，但是也算是对自己负责吧，也是成长，朋友让我觉得自己还不行，还需 要学习很多知识，我也渴望学到更多的东西，我也越来越看重知识付费这个了，看到了一些人很负责的去做微信公众号啊，或者自媒体，也都收获颇丰，但是我觉的我对自己帮助较大的是博客吧，写东西坚持下来不容易。<br>最近加入了stormzhang张哥的知识星球，看到不一样的世界，他说的东西对我帮助也很大，看到他们的知识还有一些个人能力，看到理财方面的还有一些其他方面，正能量满满的。<br>对自己11月说 “加油”！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;10月匆匆过去了，天气也逐渐开始变冷，10月份收获了很多。&lt;br&gt;交了很多的新朋友，也向了一个心仪的女生表白，虽然失败了，但是也算是对自己负责吧，也是成长，朋友让我觉得自己还不行，还需 要学习很多知识，我也渴望学到更多的东西，我也越来越看重知识付费这个了，看到了一些人很负责
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://shiyachuang.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx nodejs环境配置搭建（二）</title>
    <link href="https://shiyachuang.github.io/2017/10/23/nginx2/"/>
    <id>https://shiyachuang.github.io/2017/10/23/nginx2/</id>
    <published>2017-10-22T16:00:00.000Z</published>
    <updated>2017-11-17T07:08:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>环境搭建好了，我们来尝试一下吧</p><a id="more"></a><h5 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h5><ol><li><p>我们首先新建一个app.js 的文件, 并把下列内容粘贴进去 sudo vi app.js</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">const http = require('http')</div><div class="line">const homePage =`</div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Nodejs 测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    * &#123;</span></div><div class="line"><span class="undefined">        padding: 0;</span></div><div class="line"><span class="undefined">        margin: 0;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    body &#123;</span></div><div class="line"><span class="undefined">        padding: 30px 0;</span></div><div class="line"><span class="undefined">        text-align: center;</span></div><div class="line"><span class="undefined">        font-size: 16px;</span></div><div class="line"><span class="undefined">        background: #333;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    h1,h2&#123;</span></div><div class="line"><span class="undefined">        color:#fff;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    nav &#123;</span></div><div class="line"><span class="undefined">        margin-top:20px;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    a &#123;</span></div><div class="line"><span class="undefined">        color: #ccc;</span></div><div class="line"><span class="undefined">        text-decoration: none;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    a:hover&#123;</span></div><div class="line"><span class="undefined">        text-decoration: underline;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>年轻就要不停的奔跑<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>部署静态网站<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>电影网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>个人博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line">`</div><div class="line">http.createServer((req,res) =&gt; &#123;</div><div class="line">    res.statusCode = 200</div><div class="line">    res.setHeader = ('Content-Type', 'text/html')</div><div class="line">    res.end(homePage)</div><div class="line">&#125;)</div><div class="line">.listen(8081, ()=&gt; &#123;</div><div class="line">    console.log('server running At port 3000')</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p> esc :wq 保存成功，执行 node app.js<br> 在这一步，会遇到一些问题，比如说：<br> 端口号报错，因为防火墙的原因，此时如果你是买的ECS 服务器，那么你用手动去添加</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo vi  /etc/iptables.up.rules</div><div class="line"><span class="comment">// 80位置添加一行 </span></div><div class="line">-A INPUT -P tcp --dport <span class="number">8081</span> -j ACCEPT</div><div class="line"><span class="comment">//保存 重新载入</span></div><div class="line">sudo iptables-restore &lt; <span class="regexp">/etc/i</span>ptables.up.rules</div><div class="line"><span class="comment">// 如果你是轻量云服务器，打开控制台，然后添加规则自定义 8081即可</span></div><div class="line"><span class="comment">// 如果你如，你复制进去发现字体乱码</span></div><div class="line">sudo locale-gen zh_CN.UTF<span class="number">-8</span> en_US.UTF<span class="number">-8</span></div></pre></td></tr></table></figure></code></pre><p> 应就OK，开浏览器ip地址:8081</p></li><li><p>使用pm2来让站点保持开启，因为已经安装过了。所以我们可以直接开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pm2 start app.js <span class="comment">// 开启</span></div><div class="line">pm2 list <span class="comment">//查看列表</span></div><div class="line">pm2 show id <span class="comment">//看详情</span></div><div class="line">pm2 reload id <span class="comment">//重启</span></div><div class="line">pm2 logs id<span class="comment">//日志，没有id就是所有日志</span></div><div class="line">pm2 status <span class="comment">//查看状态</span></div></pre></td></tr></table></figure></li><li><p>访问的时候要域名加上端口，比较麻烦，所以搭建nginx 进行反向代理用做内网域名转发</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">sudo pat-get install nginx <span class="comment">//安装Nginx</span></div><div class="line">nginx -v <span class="comment">//查看版本号</span></div><div class="line">cd /etc/nginx <span class="comment">//切换目录</span></div><div class="line">vi conf.d/text-com<span class="number">-8081.</span>conf <span class="comment">// 新建文件将下面粘贴进去</span></div><div class="line">upstream text &#123;</div><div class="line">server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8081</span>;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">listen  <span class="number">80</span>;</div><div class="line">server_name 你的内网ip地址;</div><div class="line">location / &#123;</div><div class="line">        proxy_redirect off;</div><div class="line">        proxy_set_header Host $host;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_pass http:<span class="comment">//text;</span></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 查看配置文件看是否有 vi nginx.conf 查看有下面的一段，没有将复制进去</span></div><div class="line">include /etc/nginx/conf.d<span class="comment">/*.conf;</span></div></pre></td></tr></table></figure></li></ol><p>大功告成，只是在浏览器中访问你的ip 将自动转到8081端口。</p><p>参考文档：<a href="http://www.ttlsa.com/nginx/use-nginx-proxy/" target="_blank" rel="external">http://www.ttlsa.com/nginx/use-nginx-proxy/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境搭建好了，我们来尝试一下吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://shiyachuang.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx nodejs环境配置搭建（一）</title>
    <link href="https://shiyachuang.github.io/2017/10/18/nginx/"/>
    <id>https://shiyachuang.github.io/2017/10/18/nginx/</id>
    <published>2017-10-17T16:00:00.000Z</published>
    <updated>2017-11-17T06:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近个人买了一个阿里云的服务器，就想着做点事情，花了好久才配置好我的服务器。<br>将自己的心得，和遇到的坑，描述一下。</p><a id="more"></a><h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p>首先你要有一台服务器，我选的是阿里云的轻量服务器，买完就后悔了，比ECS的要贵，关键他给出的一些用起来不是特别舒服，还是喜欢自己整理和配置，最后我到最后还是用的Ubuntu 16.04进行环境的搭建。</p><ol><li><p>前置的买的步骤省略，直接进入到服务器内。显示如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-93-generic x86_64)</div><div class="line">* Documentation:  https://help.ubuntu.com</div><div class="line">* Management:     https://landscape.canonical.com</div><div class="line">* Support:        https://ubuntu.com/advantage</div></pre></td></tr></table></figure></li><li><p>sudo apt-get update // 对系统更新一下，每次更新下没有毛病</p></li><li><p>在ubuntu中安装与配置zsh与oh-my-zsh (为什么要安装这个，因为好用~)</p><ul><li><p>ubuntu中默认安装了哪些shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/shells # /etc/shells: valid login shells/bin/sh/bin/dash/bin/bash/bin/rbash</div><div class="line">（有sh、dash、bash和rbash）</div></pre></td></tr></table></figure></li><li><p>当前正在运行的是那个版本的shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $SHELL/bin/bash</div></pre></td></tr></table></figure></li><li><p>正式安装zsh、git和wget </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install zsh git wget</div></pre></td></tr></table></figure></li><li><p>获取并自动按照oh-my-zsh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</div></pre></td></tr></table></figure></li><li><p>替换bash为zsh：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chsh -s /bin/zsh</div></pre></td></tr></table></figure></li><li><p>最后重启：重新登录就能看舒服的shell了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo reboot</div></pre></td></tr></table></figure></li></ul></li><li><p>下面我们可以一口气安装很多软件，有很多将来会用到</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install vim openssl build-essential libssl-dev wget  curl</div></pre></td></tr></table></figure></li><li><p>安装node 还是选择n</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -L https://git.io/n-install | bash</div><div class="line"></div><div class="line">n v7.9.0 //我这里选择的是</div></pre></td></tr></table></figure></li><li><p>安装一下cnpm有些模块 npm还是有段慢</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g cnpm</div></pre></td></tr></table></figure></li><li><p>我们安装一下我们需要的模块，我这里用的cnpm</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm i pm2 webapck gulp grunt-cli -g</div></pre></td></tr></table></figure></li></ol><p>OK，现在nodejs环境以及以及OK了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近个人买了一个阿里云的服务器，就想着做点事情，花了好久才配置好我的服务器。&lt;br&gt;将自己的心得，和遇到的坑，描述一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://shiyachuang.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发总结3</title>
    <link href="https://shiyachuang.github.io/2017/10/15/wx2/"/>
    <id>https://shiyachuang.github.io/2017/10/15/wx2/</id>
    <published>2017-10-15T14:09:21.000Z</published>
    <updated>2017-11-16T07:47:23.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第二阶段的总结"><a href="#第二阶段的总结" class="headerlink" title="第二阶段的总结"></a>第二阶段的总结</h4><p>哈哈哈，放假回来一周，还是没怎么进入状态。。<br><a id="more"></a></p><ol><li><p>微信小程序中的swiper是用来做轮播的，不能用来做选项卡切换。选项卡切换用到了wx:if。需要注意的地方：</p><p>①绑定的事件后可直接传入参数 </p><p>②点击切换事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">clickTab(e) &#123;</div><div class="line">    e = +e</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.currentTab === e) <span class="keyword">return</span></div><div class="line">    <span class="keyword">this</span>.currentTab = e</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>③在点击切换时，相应地加载数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> handelTab(type) &#123;</div><div class="line">    type = +type</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.currentTab === type) <span class="keyword">return</span></div><div class="line">    <span class="keyword">this</span>.currentTab = type</div><div class="line">    <span class="keyword">this</span>.consumptionList = []</div><div class="line">    <span class="keyword">this</span>.optometryList = []</div><div class="line">    <span class="keyword">this</span>.hasMore = <span class="literal">true</span></div><div class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.loadData(<span class="keyword">this</span>.id, <span class="keyword">this</span>.currentTab, <span class="number">10</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>小程序没有select组件，自己做的筛选样式，详见pages/workbench/index.wpy</p></li><li><p>文字过长显示省略号，给定宽</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.name</span>&#123; </div><div class="line">  <span class="attribute">width</span>:<span class="number">100</span>rpx;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">text-overflow</span>:ellipsis;</div><div class="line">  <span class="attribute">white-space</span>: nowrap;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></li><li><p>scroll-view使用竖向滚动时，需要给一个固定高度</p></li><li><p>Wepy使用脏数据检查对setData进行封装，在函数运行周期结束时执行脏数据检查，一来可以不用关心页面多次setData是否会有性能上的问题，二来可以更加简洁去修改数据实现绑定，不用重复去写setData方法。代码如下：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.title = <span class="string">'this is title'</span></div></pre></td></tr></table></figure><p> 但需注意，在函数运行周期之外的函数里去修改数据需要手动调用$apply方法。如：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.title = <span class="string">'this is title'</span>;</div><div class="line">        <span class="keyword">this</span>.$apply();</div><div class="line">&#125;, <span class="number">3000</span>);</div></pre></td></tr></table></figure></li><li><p>小程序运行命令npm run server;wepy build —-watch;</p></li><li><p>小程序没有table组件，具体详见pages/workbench/addBasicData.wpy</p></li><li><p>小程序使用了很多flex布局</p></li><li><p>wx.showToast icon只有success和loading,没有error,warning….</p></li><li><p>WePY中的methods属性只能声明页面wxml标签的bind、catch事件，不能声明自定义方法，这与Vue的用法是不一致的。</p></li></ol><p>参考文档：<a href="https://wepyjs.github.io/wepy/#/" target="_blank" rel="external">https://wepyjs.github.io/wepy/#/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第二阶段的总结&quot;&gt;&lt;a href=&quot;#第二阶段的总结&quot; class=&quot;headerlink&quot; title=&quot;第二阶段的总结&quot;&gt;&lt;/a&gt;第二阶段的总结&lt;/h4&gt;&lt;p&gt;哈哈哈，放假回来一周，还是没怎么进入状态。。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="https://shiyachuang.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发总结2</title>
    <link href="https://shiyachuang.github.io/2017/09/30/wx1/"/>
    <id>https://shiyachuang.github.io/2017/09/30/wx1/</id>
    <published>2017-09-30T14:09:21.000Z</published>
    <updated>2017-11-16T07:15:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="WePy-小程序框架"><a href="#WePy-小程序框架" class="headerlink" title="WePy 小程序框架"></a>WePy 小程序框架</h4><p>看了一下 GitHub 上发现这个框架适合我们，而且star也不错，所以就采用了这个框架。<br>WePY 是一款让小程序支持组件化开发的框架，通过预编译的手段让开发者可以选择自己喜欢的开发风格去开发小程序。<br><a id="more"></a></p><h4 id="picker、picker-view、多列"><a href="#picker、picker-view、多列" class="headerlink" title="picker、picker-view、多列"></a>picker、picker-view、多列</h4><ol><li>picker 从底部弹出，不能自定义样式；<br>多列的时候直接在picker下写数据就可以了；</li><li>picker-view 可以自定义位置、高度、触发事件按钮等；</li><li>多列的时候需要在picker-view中picker-view-column标签，一个picker-view-column标签就代表一列；</li><li>在picker-view中只能picker-view-column标签，其他标签不会显示的；</li><li>多列<br>多列是依赖于picker的，在picker中定义多个数据变化的值就可以实现多列了；比如：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;picker mode=<span class="string">"multiSelector"</span> </div><div class="line">    bindchange=<span class="string">"bindMultiPickerChange"</span></div><div class="line">    bindcolumnchange=<span class="string">"bindMultiPickerColumnChange"</span> </div><div class="line">    value=<span class="string">"&#123;&#123;multiIndex&#125;&#125;"</span> </div><div class="line">    range=<span class="string">"&#123;&#123;multiArray&#125;&#125;"</span>&gt;</div><div class="line">    </div><div class="line">    <span class="comment">// 当前选择：</span></div><div class="line">    &#123;&#123;multiArray[<span class="number">0</span>][multiIndex[<span class="number">0</span>]]&#125;&#125;， </div><div class="line">    &#123;&#123;multiArray[<span class="number">1</span>][multiIndex[<span class="number">1</span>]]&#125;&#125;，</div><div class="line">    &#123;&#123;multiArray[<span class="number">2</span>][multiIndex[<span class="number">2</span>]]&#125;&#125;</div></pre></td></tr></table></figure><h5 id="wepy组件"><a href="#wepy组件" class="headerlink" title="wepy组件"></a>wepy组件</h5><ul><li>将组件引入使用,组件要写在components文件下，并且类继承wepy.component；</li><li>先在父组件script标签中import引入子组件，如:(import Child from ‘./Child’)；</li><li>在js中的components下声明下子组件，给子组件一个id标识，如:(components = { ChildTag: Child })；</li><li><p>根据声明的子组件在相应的地方使用子组件标签，如:()；这样就可以实现子组件的引入了。</p></li><li><p>子组件与父组件之间的传参需要</p><ol><li>先在子组件的props中定义一下参数，如:(props={ title: { type: Number, default: 50,twoWay: true }})；</li><li>在父组件中接收参数是通过子组件的attribute进行获取，如:()；</li><li>在父组件中也可以在data中设置参数的变化，如:(data = { parentTitle: ‘p-title’ })；这样就可以实现父子组件之间的传参了，虽然在项目中没有被用到，但是也体会了一下这样的传参方式；</li></ol></li></ul><ul><li>在日历组件中有点击确定和取消的事件，点击确定时还要将选好的时间参数传递到父组件中；在wepy中有三种关于事件传递的方法，如下：<ol><li>$broadcast事件是由父组件发起，所有子组件都会触发事件，除非事件被手动取消；</li><li>$invoke是一个组件对另一个组件的直接调用，通过传入的组件路径找到相应组件，然后再调用其方法；</li><li>$emit与$broadcast正好相反，事件是由子组件发起的父组件会依次接收到$emit事件; 在日历这里我用的是$emit，因为需要子组件触发然后传到父组件；在父组件中自定义时候使用@customEvent.user绑定用户自定义组件事件，其中，@表示事件修饰符，customEvent 表示事件名称，.user表示事件后缀；目前有三种后缀：<ul><li>default: 绑定小程序冒泡事件事件，如bindtap；</li><li>stop: 绑定小程序非冒泡事件，如catchtap；</li><li>user: 绑定用户自定义组件事件，通过$emit触发；</li></ul></li></ol></li></ul><p>具体实现是这样的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 子组件： 确定</span></div><div class="line">   handleConfirm() &#123;   <span class="comment">//点击事件</span></div><div class="line">    <span class="keyword">const</span> time = <span class="keyword">this</span>.year+ <span class="string">'-'</span> +</div><div class="line">                <span class="keyword">this</span>.month + <span class="string">'-'</span> +</div><div class="line">                <span class="keyword">this</span>.currentDay+ <span class="string">'  '</span>+</div><div class="line">                <span class="keyword">this</span>.currentHour+<span class="string">':'</span>+</div><div class="line">                <span class="keyword">this</span>.currentMinute</div><div class="line">          <span class="keyword">this</span>.$emit(<span class="string">'childConfirm'</span>, time) <span class="comment">//将事件传递给父组件</span></div><div class="line">   &#125;</div><div class="line"><span class="comment">// 父组件：    </span></div><div class="line"> parentConfirm(time, e) &#123; <span class="comment">//传递过来的事件并接收参数</span></div><div class="line">    <span class="keyword">this</span>.showCalendar = <span class="literal">false</span></div><div class="line">    <span class="keyword">this</span>.remindTime = <span class="string">''</span></div><div class="line">    <span class="keyword">this</span>.currentDate = time</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><p>注：子组件传递过来的参数和父组件接收的参数的顺序是相反的，比如：<br>子组件：this.$emit(‘childConfirm’, num, props1, props2)<br>父组件：parentConfirm(props2, props1, num, event)<br>前两个参数是确定的，第一个是事件名，第二个是个数字；但是我感觉第二个参数也就是num是可以不是数字的；</p><p>参考文档：<a href="https://wepyjs.github.io/wepy/#/" target="_blank" rel="external">https://wepyjs.github.io/wepy/#/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;WePy-小程序框架&quot;&gt;&lt;a href=&quot;#WePy-小程序框架&quot; class=&quot;headerlink&quot; title=&quot;WePy 小程序框架&quot;&gt;&lt;/a&gt;WePy 小程序框架&lt;/h4&gt;&lt;p&gt;看了一下 GitHub 上发现这个框架适合我们，而且star也不错，所以就采用了这个框架。&lt;br&gt;WePY 是一款让小程序支持组件化开发的框架，通过预编译的手段让开发者可以选择自己喜欢的开发风格去开发小程序。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="https://shiyachuang.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发总结</title>
    <link href="https://shiyachuang.github.io/2017/09/27/wx/"/>
    <id>https://shiyachuang.github.io/2017/09/27/wx/</id>
    <published>2017-09-27T12:07:43.000Z</published>
    <updated>2017-11-16T06:59:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司有需求要做小程序，让我事先调研一下小程序的一些基本使用，自己做了个大概的整理。</p><a id="more"></a><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><ul><li>程序周期<ol><li>onLaunch：首次打开小程序时触发，只触发一次；第二次打开就不会被触发了；</li><li>onShow：显示程序，从后台进入到前端的时候被触发；</li><li>onHide：隐藏程序，从前端到后台的时候被触发；</li><li>onError：程序发生错误或调用api错误被触发；并且会返回错误信息；</li></ol></li><li>页面周期<ol><li>onLoad：页面加载时被触发；只会首次渲染的时候执行一次；初始化状态；</li><li>onShow：页面显示；是每次界面切换都会执行；等待激活状态；接收到页面初始化完成后就将初始化的数据发送到页面上，然后等待初始化数据渲染页面完成；</li><li>onReady：页面初次加载完成；激活状态；收到初始化渲染完成后就进入激活状态正常运行，此时就会触onReady；</li><li>onHide：页面隐藏；后台运行状态；从前端到后台的过程，但是该状态和激活状态是相同的，同样可以使setData来更新data数据；</li><li>onUnload：页面卸载</li></ol></li><li>tabBar<ol><li>tabBar中的list是个数组，数组内最少2个元素，最多5个；</li><li>tabBar页面是需要配置tabBar的时候在list中引入该页面的路径，如果list中有什么页面tabBar就会显示显示什么页面；</li><li>tabBar的跳转是通过wx.switchTab来实现的；</li><li>遇到问题：进入小程序之后先展示登录页在进入tabBar?<br>解决方法：进入小程序展示的第一个页面是和app中的page第一个引入的页面是一致的；所以把登陆页第一个引入就可以解决该问题；</li></ol></li><li>页面跳转<ol><li>navigateTo：保留当前页面跳转到另一个页面，小程序对页面层数有要求，不能超过5层，所以用的时候需要十分注意；</li><li>redirectTo：关闭当前页再跳转；不好的地方是当用户点击返回的时候无法回到原来的页面；</li><li>reLaunch：关闭所有的页面再进行跳转；存在和</li><li>redirectTo相同的问题；</li><li>switchTab：是用来跳转到tabBar页面的；跳转之前会关闭掉所有不是tabBar的页面；除switchTab可以跳转tabBar页面，使用reLaunch也可以跳转；</li><li>navigateBack：关闭当前页，返回上一层的页面；</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司有需求要做小程序，让我事先调研一下小程序的一些基本使用，自己做了个大概的整理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="https://shiyachuang.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Node使用stream导出CSV</title>
    <link href="https://shiyachuang.github.io/2017/09/18/csv/"/>
    <id>https://shiyachuang.github.io/2017/09/18/csv/</id>
    <published>2017-09-18T12:10:23.000Z</published>
    <updated>2017-11-16T05:56:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>公司需求将8万条数据很快的导出，研究了一下，在老大的帮助下成功实现，记录流程希望能帮到你。</p><h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>如果说你想导出Excel可以看我之前的一篇文章，有关Excel导出的。<br><a id="more"></a></p><h4 id="环境-Nodejs-作为后台语言"><a href="#环境-Nodejs-作为后台语言" class="headerlink" title="环境 Nodejs 作为后台语言"></a>环境 Nodejs 作为后台语言</h4><p>流（stream）在 Node.js 中是处理流数据的抽象接口（abstract interface）。 stream 模块提供了基础的 API 。使用这些 API 可以很容易地来构建实现流接口的对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;Readable&#125; = <span class="built_in">require</span>(<span class="string">'stream'</span>)</div></pre></td></tr></table></figure></p><p>声明一个方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">genCsv</span>(<span class="params">data, res</span>) </span>&#123;</div><div class="line">    <span class="comment">//  data [&#123;id: 1, code: aaa, money: 1&#125;, &#123;id: 2, code: bbb, money: 2&#125;]</span></div><div class="line">    <span class="keyword">let</span> csv = <span class="keyword">new</span> Readable</div><div class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        csv.push(<span class="string">`url\n`</span>)<span class="comment">// 这个是表头 </span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> data) &#123;</div><div class="line">        <span class="keyword">const</span> str = <span class="string">`<span class="subst">$&#123;i.code&#125;</span>,<span class="subst">$&#123;i.money&#125;</span>\n`</span> <span class="comment">// \n表示换行</span></div><div class="line">        csv.push(str)</div><div class="line">        &#125;</div><div class="line">        csv.push(<span class="literal">null</span>)<span class="comment">// 这个表示结束 </span></div><div class="line">    &#125;</div><div class="line">    push()</div><div class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/csv'</span>);</div><div class="line">    res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">`attachment; filename=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(<span class="string">'兑换码下载'</span>)&#125;</span>.csv`</span>);</div><div class="line">    <span class="comment">// csv.pipe(process.stdout) 结束但是这里直接返回res        </span></div><div class="line">    csv.pipe(res)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>export 一个方法暴露给用户，拿到参数去数据库查询。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadBonusCsv</span>(<span class="params">req, res, rest: WxRest</span>) </span>&#123;</div><div class="line">     <span class="keyword">const</span> &#123;recordId&#125; = req.query</div><div class="line">     <span class="keyword">const</span> data = <span class="keyword">await</span> rest.query(<span class="string">`select id, code, money/100 as money from bonus where record_id = <span class="subst">$&#123;recordId&#125;</span>`</span>);</div><div class="line">     <span class="keyword">return</span> genCsv(data, res)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>到这里就大功告成了。</p><p>参考文档：<a href="http://nodejs.cn/api/stream.html#stream_class_stream_readable" target="_blank" rel="external">http://nodejs.cn/api/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;公司需求将8万条数据很快的导出，研究了一下，在老大的帮助下成功实现，记录流程希望能帮到你。&lt;/p&gt;
&lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h4&gt;&lt;p&gt;如果说你想导出Excel可以看我之前的一篇文章，有关Excel导出的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="csv" scheme="https://shiyachuang.github.io/tags/csv/"/>
    
  </entry>
  
  <entry>
    <title>MAC全栈环境配置</title>
    <link href="https://shiyachuang.github.io/2017/09/15/mac/"/>
    <id>https://shiyachuang.github.io/2017/09/15/mac/</id>
    <published>2017-09-15T03:23:06.000Z</published>
    <updated>2017-11-03T10:33:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><p>公司新来了一个妹子，公司新买了一台电脑帮她做环境，总结了一下，写出一篇文章，希望能帮到你。</p><h3 id="通用软件"><a href="#通用软件" class="headerlink" title="通用软件"></a>通用软件</h3><h4 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h4><p>拿到一台新的MAC，首先推荐安装HomeBrew。<br>HomeBrew是Mac下面的一个包管理器，方便我们安装一些Mac OS没有的UNIX工具、软件。<br><a id="more"></a></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></div></pre></td></tr></table></figure><p>将以上命令粘贴至终端。<br>确保正常安装之后，可以输入brew -h查看帮助：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> Example <span class="symbol">usage:</span></div><div class="line"> brew [info <span class="params">| home |</span> options ] [FORMULA...]</div><div class="line"> brew install FORMULA...</div><div class="line"> brew uninstall FORMULA...</div><div class="line"> brew search [foo]</div><div class="line"> brew list [FORMULA...]</div><div class="line"> brew update</div><div class="line"> brew upgrade [FORMULA...]</div><div class="line"> brew pin/unpin [FORMULA...]</div><div class="line"><span class="symbol">Troubleshooting:</span></div><div class="line">  brew doctor</div><div class="line">  brew install -vd FORMULA</div><div class="line">  brew [--env <span class="params">| config]</span></div><div class="line"><span class="params">Brewing:</span></div><div class="line"><span class="params">  brew create [URL [--no-fetch]]</span></div><div class="line"><span class="params">  brew edit [FORMULA...]</span></div><div class="line"><span class="params">  https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Formula-Cookbook.md</span></div><div class="line"><span class="params">Further help:</span></div><div class="line"><span class="params">  man brew</span></div><div class="line"><span class="params">  brew home</span></div></pre></td></tr></table></figure><h4 id="使用HomeBrew"><a href="#使用HomeBrew" class="headerlink" title="使用HomeBrew"></a>使用HomeBrew</h4><p>搜索一个包，在不确定想要安装的包是否有之前，建议先搜索一下，执行下面命令：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew search mongod</div></pre></td></tr></table></figure></p><p>安装包，在搜索到想要安装的包之后，执行下面命令即可安装：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mongod</div></pre></td></tr></table></figure></p><p>查看安装过的包列表：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew list</div></pre></td></tr></table></figure></p><p>更新HomeBrew在服务端的包结构：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew update</div></pre></td></tr></table></figure></p><p>卸载安装包:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew uninstall mongod</div></pre></td></tr></table></figure></p><h4 id="item2"><a href="#item2" class="headerlink" title="item2"></a>item2</h4><p>工欲善其事，必先利其器。iTerm2是Mac系统的独有终端工具.</p><ol><li><p>首先下载iterm2  <a href="http://www.iterm2.com/downloads.html" target="_blank" rel="external">http://www.iterm2.com</a> </p></li><li><p>安装oh my zsh</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span></div></pre></td></tr></table></figure></li><li><p>当然是安装node了，首选tj大神的n</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L <span class="symbol">https:</span>/<span class="regexp">/git.io/n</span>-install <span class="params">| bash</span></div></pre></td></tr></table></figure></li><li><p>使用方法: 列出了几种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- n atest <span class="comment">// 安装最新版本</span></div><div class="line">- n       <span class="comment">// 切换node版本</span></div><div class="line">- n ls    <span class="comment">// 列出所有可以安装的版本</span></div><div class="line">- n stable<span class="comment">// 安装稳定版本</span></div><div class="line">- n rm <span class="number">8.0</span><span class="comment">// 删除某个版本</span></div></pre></td></tr></table></figure></li><li><p>npm淘宝镜像</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~<span class="regexp">/ .npmrc  registry=http:/</span><span class="regexp">/registry.npm.taobao.org</span></div></pre></td></tr></table></figure></li></ol><p>参考文档：<a href="https://mac.aotu.io/index.html" target="_blank" rel="external">https://mac.aotu.io/index.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于&quot;&gt;&lt;a href=&quot;#关于&quot; class=&quot;headerlink&quot; title=&quot;关于&quot;&gt;&lt;/a&gt;关于&lt;/h3&gt;&lt;p&gt;公司新来了一个妹子，公司新买了一台电脑帮她做环境，总结了一下，写出一篇文章，希望能帮到你。&lt;/p&gt;
&lt;h3 id=&quot;通用软件&quot;&gt;&lt;a href=&quot;#通用软件&quot; class=&quot;headerlink&quot; title=&quot;通用软件&quot;&gt;&lt;/a&gt;通用软件&lt;/h3&gt;&lt;h4 id=&quot;HomeBrew&quot;&gt;&lt;a href=&quot;#HomeBrew&quot; class=&quot;headerlink&quot; title=&quot;HomeBrew&quot;&gt;&lt;/a&gt;HomeBrew&lt;/h4&gt;&lt;p&gt;拿到一台新的MAC，首先推荐安装HomeBrew。&lt;br&gt;HomeBrew是Mac下面的一个包管理器，方便我们安装一些Mac OS没有的UNIX工具、软件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mac" scheme="https://shiyachuang.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>react-study</title>
    <link href="https://shiyachuang.github.io/2017/09/10/study/"/>
    <id>https://shiyachuang.github.io/2017/09/10/study/</id>
    <published>2017-09-10T07:38:20.000Z</published>
    <updated>2017-09-10T08:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>react首先面临的问题就是如何实现组件之间的传值，首当其冲就是父子组件之间的传值，原来是用angular开发，自从接触到react发现，更喜欢这种开发方式，感觉很舒服。<br><a id="more"></a></p></blockquote><ul><li>父组件向子组件传值比较简单的，this.props就能实现，具体实现方式为：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//子组件</span></div><div class="line"><span class="comment">//在子组件中直接用this.props.dataPlaceholder将值传递过来并且用placeholder接收</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;Input style = &#123; InputStyle &#125; placeholder=&#123;<span class="keyword">this</span>.props.dataPlaceholder&#125; onChange=&#123;<span class="keyword">this</span>.props.onChange&#125; onBlur=&#123;<span class="keyword">this</span>.props.inputOnBlur&#125;/&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> InputComponent;</div><div class="line"></div><div class="line"><span class="comment">//父组件</span></div><div class="line"><span class="comment">//父组件中定义一个名为dataPlaceholder的自定义属性</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewCouponName</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// const &#123; onChange &#125;</span></div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;div className=<span class="string">"coupon-input"</span>&gt;</div><div class="line">        &lt;span&gt;*名字&lt;<span class="regexp">/span&gt;</span></div><div class="line"><span class="regexp">        &lt;InputComponent dataPlaceholder="10个字以内" onBlur=&#123;this.inputOnBlur&#125; /</span>&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">export default NewCouponName</span></div></pre></td></tr></table></figure><ul><li>子组件想父组件传参</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//父组件</span></div><div class="line"><span class="comment">//在父组件中要写一个方法来接收子组件传过来的值</span></div><div class="line"></div><div class="line">  <span class="comment">//  接收搜索的函数</span></div><div class="line">   handleSearchValue(params)&#123;</div><div class="line">     <span class="keyword">let</span> searchData = <span class="keyword">this</span>.state.searchData;</div><div class="line">     <span class="keyword">const</span> pagination = &#123; ...this.state.pagination &#125;</div><div class="line">     <span class="keyword">this</span>.setState(&#123;</div><div class="line">       pagination:&#123;</div><div class="line">         current:<span class="number">1</span>,</div><div class="line">       &#125;,</div><div class="line">       page:<span class="number">1</span>,</div><div class="line">       searchData:&#123;</div><div class="line">         ...params,</div><div class="line">       &#125;</div><div class="line">     &#125;,()=&gt;&#123;</div><div class="line">       <span class="keyword">let</span> &#123;searchData &#125; = <span class="keyword">this</span>.state;</div><div class="line">       <span class="keyword">this</span>.getData(&#123;</div><div class="line">           pageSize: pagination.pageSize,</div><div class="line">           page: <span class="number">1</span>,</div><div class="line">           ...searchData,</div><div class="line">         &#125;);</div><div class="line">     &#125;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">  <span class="comment">//子组件</span></div><div class="line">  <span class="comment">//子组件在获取值的时候，调用父组件传过来的方法，并将获取的值传递过去</span></div><div class="line"></div><div class="line">   handleSearch = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="keyword">this</span>.props.form.validateFields(<span class="function">(<span class="params">err, value,</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 将子组件search文件中的值，传给父组件</span></div><div class="line">      <span class="keyword">this</span>.props.handleSearchValue(&#123;</div><div class="line">        ...values,</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;react首先面临的问题就是如何实现组件之间的传值，首当其冲就是父子组件之间的传值，原来是用angular开发，自从接触到react发现，更喜欢这种开发方式，感觉很舒服。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://shiyachuang.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>8月份总结</title>
    <link href="https://shiyachuang.github.io/2017/08/30/8%E6%9C%88%E6%80%BB%E7%BB%93-1/"/>
    <id>https://shiyachuang.github.io/2017/08/30/8月总结-1/</id>
    <published>2017-08-30T13:23:06.000Z</published>
    <updated>2017-11-16T07:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前头"><a href="#写在前头" class="headerlink" title="写在前头"></a>写在前头</h2><blockquote><p>8月份是比较忙碌的一个月，博客停止更新了一个月。</p></blockquote><p>  这个月为了完成公司的任务，疯狂写代码，解决各种bug，虽然很累但是感觉也很充实，<br>  之所以停止更新还有一个个人原因。搬了新家，住起来也比原来舒服多了。</p><a id="more"></a><p>  这一个月做项目，有种得心应手的感觉，antd 框架简直让我们可以提前下班，当然我觉得更好的一件事就是，对于react的理解也越来越熟练，准备把这个月的对于react的积累，全部写进博客里。</p>  <!-- <span itemprop="image" itemscope itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/WechatIMG34.jpeg" class="full-image" alt="alt" title="上班路上随手一拍" /><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span> –&gt;<!-- <div class="note class_name"><p>Content (md partial supported) </p></div> –&gt;-->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前头&quot;&gt;&lt;a href=&quot;#写在前头&quot; class=&quot;headerlink&quot; title=&quot;写在前头&quot;&gt;&lt;/a&gt;写在前头&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;8月份是比较忙碌的一个月，博客停止更新了一个月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  这个月为了完成公司的任务，疯狂写代码，解决各种bug，虽然很累但是感觉也很充实，&lt;br&gt;  之所以停止更新还有一个个人原因。搬了新家，住起来也比原来舒服多了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="https://shiyachuang.github.io/2017/07/21/ES6/"/>
    <id>https://shiyachuang.github.io/2017/07/21/ES6/</id>
    <published>2017-07-21T11:13:02.000Z</published>
    <updated>2017-11-16T06:40:34.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>我一般会在周末更新一篇文章，不一定会是什么，有时候心血来潮就去看一些东西，别人写的ES6我可能觉得不太好，或者我用着不太方便，我就自己写我自己的、只是加强一边记忆而已。</p></blockquote><a id="more"></a><ul><li><h4 id="let-块级作用域"><a href="#let-块级作用域" class="headerlink" title="let 块级作用域"></a>let 块级作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">use strict</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">   <span class="keyword">let</span>  fruit = <span class="string">'apple'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fruit) <span class="comment">//fruit is not defined</span></div></pre></td></tr></table></figure></li><li><h4 id="const-常量"><a href="#const-常量" class="headerlink" title="const 常量"></a>const 常量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name = <span class="string">'apple'</span></div><div class="line">name = <span class="string">'banana'</span></div><div class="line"><span class="comment">//Assignment to constant variable</span></div><div class="line"><span class="keyword">const</span> name = &#123;<span class="attr">foo</span> : <span class="string">'apple'</span> &#125;</div><div class="line">name.foo = <span class="string">'banana'</span></div><div class="line"><span class="comment">//可以正常运行</span></div></pre></td></tr></table></figure></li><li><h5 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>]</div><div class="line"><span class="keyword">let</span> [one,two,three] =foo</div><div class="line"><span class="built_in">console</span>.log(one,two,three)<span class="comment">// one,two,three</span></div></pre></td></tr></table></figure></li><li><h4 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h4><p>只需保证key可以对应就行，也可只取name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>:<span class="string">'chuang'</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">'男'</span>&#125;</div><div class="line"><span class="keyword">let</span> &#123;name,age,sex&#125; = obj</div><div class="line"><span class="built_in">console</span>.log(name,age,sex)<span class="comment">//chuang 22 男</span></div></pre></td></tr></table></figure></li><li><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123; <span class="keyword">return</span> a+b &#125;</div><div class="line"><span class="comment">//当后边是表达式的时候也可以简写</span></div><div class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b</div><div class="line"><span class="comment">// 他们等同于</span></div><div class="line"><span class="keyword">let</span> add =<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a+b</div><div class="line">&#125;</div><div class="line"><span class="comment">//在回调中也可以使用</span></div><div class="line"><span class="keyword">let</span> nums =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="keyword">let</span> doublenum = num.map( <span class="function"><span class="params">i</span> =&gt;</span> i*<span class="number">2</span>)</div><div class="line"><span class="built_in">console</span>.log(doublenum)<span class="comment">//[2,3,6]</span></div></pre></td></tr></table></figure></li><li><h4 id="this-在箭头函数中的作用"><a href="#this-在箭头函数中的作用" class="headerlink" title="this 在箭头函数中的作用"></a>this 在箭头函数中的作用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> age =<span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> student = &#123;</div><div class="line">    age:<span class="number">1</span>,</div><div class="line">    grow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">           <span class="built_in">console</span>.log(++<span class="keyword">this</span>.age)</div><div class="line">       &#125;,<span class="number">100</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">student.grow()<span class="comment">//2</span></div></pre></td></tr></table></figure></li><li><h4 id="对象表达式"><a href="#对象表达式" class="headerlink" title="对象表达式"></a>对象表达式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> obj =&#123;a,b&#125;</div><div class="line"><span class="built_in">console</span>.log(obj)<span class="comment">//Object &#123;a: 1, b: 2&#125;</span></div></pre></td></tr></table></figure></li><li><h4 id="Rest参数"><a href="#Rest参数" class="headerlink" title="Rest参数"></a>Rest参数</h4><p>当一个函数的最后一参数有’…’ 这样的前缀，他会变成一个参数的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">funtion test(...args) &#123;</div><div class="line">    <span class="built_in">console</span>.log(args)</div><div class="line">&#125;</div><div class="line">test(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)<span class="comment">//[2，3，4]</span></div><div class="line">funtion test2(name,...args) &#123;</div><div class="line">    <span class="built_in">console</span>.log(args)</div><div class="line">&#125;</div><div class="line">test2(<span class="string">'chuang'</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)<span class="comment">//[2,3,1]</span></div></pre></td></tr></table></figure></li><li><h4 id="展开操作符"><a href="#展开操作符" class="headerlink" title="展开操作符"></a>展开操作符</h4><ul><li><p>用于函数调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x,y,z</span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">let</span> args =[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">test(..args)</div></pre></td></tr></table></figure></li><li><p>用于数字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr1 =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="keyword">let</span> arr2 =[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="keyword">let</span> arr3 =[...arr1,arr2]</div><div class="line"><span class="built_in">console</span>.log(arr3)<span class="comment">//[1, 2, 3, 4, 5, 6,]</span></div></pre></td></tr></table></figure></li><li><p>对象的展开操作符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mike = &#123; <span class="attr">name</span>: <span class="string">'chuang'</span>,<span class="attr">sex</span>: <span class="string">'male'</span>&#125;</div><div class="line">mike =&#123;...mike,<span class="attr">age</span>:<span class="number">50</span>&#125;</div><div class="line"><span class="built_in">console</span>.log(mike)<span class="comment">//&#123;name: 'chuang',sex: 'male',age:50&#125;</span></div></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;我一般会在周末更新一篇文章，不一定会是什么，有时候心血来潮就去看一些东西，别人写的ES6我可能觉得不太好，或者我用着不太方便，我就自己写我自己的、只是加强一边记忆而已。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Es6" scheme="https://shiyachuang.github.io/tags/Es6/"/>
    
  </entry>
  
  <entry>
    <title>react demo</title>
    <link href="https://shiyachuang.github.io/2017/07/15/react/"/>
    <id>https://shiyachuang.github.io/2017/07/15/react/</id>
    <published>2017-07-15T15:30:00.000Z</published>
    <updated>2017-11-16T06:54:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="子组件调用父组件函数"><a href="#子组件调用父组件函数" class="headerlink" title="子组件调用父组件函数"></a>子组件调用父组件函数</h4><p>可能是最简单的一个函数了，如果有时间我会写两个稍微更好的例子。子组件调用父子间的函数，并把值传给父组件<br><a id="more"></a><br>定义父组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React,  <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'./Test'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">handleChange = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(val)</div><div class="line">  &#125;</div><div class="line">  render () &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;Test handleChange&#123;<span class="keyword">this</span>.handleChange /&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure><p>定义子组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  onChange =<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 获取输入框的值 e.target.value，将值传给父组件</span></div><div class="line">    <span class="keyword">this</span>.props.handleChange(e.target.value)</div><div class="line">  &#125;</div><div class="line">  render () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onChange&#125;</span> /&gt;</span></span></div><div class="line"><span class="xml">  &#125;</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;子组件调用父组件函数&quot;&gt;&lt;a href=&quot;#子组件调用父组件函数&quot; class=&quot;headerlink&quot; title=&quot;子组件调用父组件函数&quot;&gt;&lt;/a&gt;子组件调用父组件函数&lt;/h4&gt;&lt;p&gt;可能是最简单的一个函数了，如果有时间我会写两个稍微更好的例子。子组件调用父子间的函数，并把值传给父组件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://shiyachuang.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>关于微信分享的小坑</title>
    <link href="https://shiyachuang.github.io/2017/07/13/weixin/"/>
    <id>https://shiyachuang.github.io/2017/07/13/weixin/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-09-10T08:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="WeChat-share-有关显示"><a href="#WeChat-share-有关显示" class="headerlink" title="WeChat share 有关显示"></a>WeChat share 有关显示</h4><p>在调用分享接口时，安卓部分手机可能显示有误，尝试在调用前延迟1500ms<br><a id="more"></a></p><h4 id="分享链接有关"><a href="#分享链接有关" class="headerlink" title="分享链接有关"></a>分享链接有关</h4><p>在将链接分享时 微信会自动将location.search变为分享来源代码</p><ul><li>原始链接为</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:3000/corp/#/full/try-vote-list?user=15652813691&amp;user_id=710</span></div></pre></td></tr></table></figure><ul><li>经过微信分享给朋友后</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:3000/corp/?from=singlemessage&amp;isappinstalled=0#/full/try-vote-list?user=18896817619&amp;user_id=777</span></div></pre></td></tr></table></figure><ul><li>在该页面下只改变参数进行跳转时，无效</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location.replace(<span class="string">`<span class="subst">$&#123;location.origin&#125;</span>/corp/#/full/try-vote-list?user=<span class="subst">$&#123;$scope.third&#125;</span>&amp;user_id=<span class="subst">$&#123;$scope.currentUser&#125;</span>`</span>)</div></pre></td></tr></table></figure><ul><li>解决方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location.replace(<span class="string">`<span class="subst">$&#123;location.origin&#125;</span>/corp/<span class="subst">$&#123;location.search&#125;</span>#/full/try-vote-list?user=<span class="subst">$&#123;$scope.third&#125;</span>&amp;user_id=<span class="subst">$&#123;$scope.currentUser&#125;</span>`</span>)</div></pre></td></tr></table></figure><p>在进入该页面时，匹配到 &amp;isappinstalled=0，将其直接跳转至去除来源信息的链接</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;WeChat-share-有关显示&quot;&gt;&lt;a href=&quot;#WeChat-share-有关显示&quot; class=&quot;headerlink&quot; title=&quot;WeChat share 有关显示&quot;&gt;&lt;/a&gt;WeChat share 有关显示&lt;/h4&gt;&lt;p&gt;在调用分享接口时，安卓部分手机可能显示有误，尝试在调用前延迟1500ms&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="WeChat share" scheme="https://shiyachuang.github.io/tags/WeChat-share/"/>
    
  </entry>
  
  <entry>
    <title>angular整理</title>
    <link href="https://shiyachuang.github.io/2017/07/12/angular/"/>
    <id>https://shiyachuang.github.io/2017/07/12/angular/</id>
    <published>2017-07-11T16:23:06.000Z</published>
    <updated>2017-11-16T06:55:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="angular-js-学习"><a href="#angular-js-学习" class="headerlink" title="angular.js 学习"></a>angular.js 学习</h2><blockquote><p>定义class的三种方法<br><a id="more"></a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">'myApp'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">.red&#123;color: red;&#125;.red2&#123;color: #f0f;&#125;</span></div><div class="line"><span class="undefined">.red3&#123;color: #00f;&#125;.red4&#123;color: #2ff;&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>  <span class="attr">ng-class</span>=<span class="string">"&#123;&#123;red&#125;&#125;"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>  <span class="attr">ng-class</span>=<span class="string">"&#123;true: 'red', false: 'red2'&#125;[isActive]"</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>  <span class="attr">ng-class</span>=<span class="string">"&#123;'red3': isSelected, 'red4': isCar&#125;"</span>&gt;</span>444<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules\angular\angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">var app = angular.module('myApp', []);</span></div><div class="line"><span class="undefined">app.controller('myCtrl', function($scope) &#123;</span></div><div class="line"><span class="undefined">$scope.red="red";</span></div><div class="line"><span class="undefined">   $scope.isActive = false;</span></div><div class="line"><span class="undefined">    $scope.isSelected = true;</span></div><div class="line"><span class="undefined">    $scope.isCar = false;</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;angular-js-学习&quot;&gt;&lt;a href=&quot;#angular-js-学习&quot; class=&quot;headerlink&quot; title=&quot;angular.js 学习&quot;&gt;&lt;/a&gt;angular.js 学习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义class的三种方法&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://shiyachuang.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Excel 导出</title>
    <link href="https://shiyachuang.github.io/2017/07/04/excel/"/>
    <id>https://shiyachuang.github.io/2017/07/04/excel/</id>
    <published>2017-07-04T15:44:46.000Z</published>
    <updated>2017-09-10T08:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先引入Excel 模板</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> xl = <span class="built_in">require</span>(<span class="string">'excel4node'</span>);<span class="comment">//引入Excel模板</span></div></pre></td></tr></table></figure><a id="more"></a><blockquote><p>实例化工作簿</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> wb = <span class="keyword">new</span> xl.Workbook()<span class="comment">//实例化工作薄</span></div><div class="line">ler ws = wb.addWorksheet(<span class="string">'Sheet 1'</span>), <span class="comment">//实例化表</span></div></pre></td></tr></table></figure><blockquote><p>自定义style</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> styleFont = &#123;</div><div class="line">    font: &#123;</div><div class="line">      color: <span class="string">'#000000'</span>,</div><div class="line">      name: <span class="string">'宋体'</span>,</div><div class="line">      size: <span class="number">12</span></div><div class="line">    &#125;,</div><div class="line">    alignment: &#123;</div><div class="line">      horizontal: <span class="string">'center'</span></div><div class="line">    &#125;,</div><div class="line">    numberFormat: <span class="string">'#,##0'</span></div><div class="line">  &#125;;</div><div class="line"><span class="comment">//调用方法</span></div><div class="line">ws.cell(<span class="number">1</span>,<span class="number">2</span>).string(value).style(styleFont);</div></pre></td></tr></table></figure><blockquote><p>设置每列的宽度</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一行从1-7列设置宽度40</span></div><div class="line">_.range(<span class="number">1</span>, <span class="number">8</span>).forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</div><div class="line">    ws.column(++i).setWidth(<span class="number">40</span>);</div><div class="line">  &#125;)</div></pre></td></tr></table></figure><blockquote><p>thead 设置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> head_title = [<span class="string">'ID'</span>, <span class="string">'名字'</span>, <span class="string">'电话'</span>, <span class="string">'公司'</span>, <span class="string">'新增会员数'</span>, <span class="string">'新增健康记录'</span>, <span class="string">'新增消费记录'</span>]</div><div class="line">  head_title.forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</div><div class="line">    ws.cell(<span class="number">1</span>, ++i).string(v).style(style.title);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><blockquote><p>第一行合并</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一行合并</span></div><div class="line"><span class="comment">// ws.cell(startRow, startColumn, [[endRow, endColumn], isMerged]);</span></div><div class="line"><span class="comment">//isMerged = '是否合并'</span></div><div class="line">ws.cell(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="literal">true</span>).string(titleRow).style(styleTitle);</div></pre></td></tr></table></figure><blockquote><p>last 最后一步</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'</span>);</div><div class="line"></div><div class="line">res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">`attachment; filename=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(<span class="string">'会员信息数据'</span>)&#125;</span>.xlsx`</span>);</div><div class="line"></div><div class="line">wb.writeToBuffer().then(<span class="function"><span class="params">data</span> =&gt;</span> res.send(data));</div></pre></td></tr></table></figure><hr><p><strong>参考资料</strong><br><a href="https://www.npmjs.com/package/excel4node" target="_blank" rel="external">https://www.npmjs.com/package/excel4node</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;先引入Excel 模板&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; xl = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;excel4node&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//引入Excel模板&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="excel" scheme="https://shiyachuang.github.io/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>MySql 语句整理</title>
    <link href="https://shiyachuang.github.io/2017/06/22/mysql/"/>
    <id>https://shiyachuang.github.io/2017/06/22/mysql/</id>
    <published>2017-06-22T02:20:05.000Z</published>
    <updated>2017-09-10T08:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>查询结果第一种情况</p></blockquote><p><strong>从第一个表里面拿出来的数据，作为表 a，第二个表作为 b， 第三个作为 c ，a 表中不满足  b 条件被删除，然后和 c 比对 ，不满足 c 被删除，剩下的数据再根据 a 的 where  查出结果</strong></p><p>join 代表链接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rest.query(<span class="string">'select * from 表名 '</span> a</div><div class="line">join(<span class="string">'select ··· from 表名 where 条件 '</span>) b on a.id = b.id</div><div class="line">join(<span class="string">'select ··· from 表名 '</span>) c on c.id = a.id where <span class="string">' a.条件 and a.条件 '</span></div><div class="line">)</div></pre></td></tr></table></figure><a id="more"></a><blockquote><p>查询结果第二种情况</p></blockquote><p><strong>select时可以 a.属性名 b.属性名 as  name</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rest.query(<span class="string">'select a.id, b.id as auit_id, a.name, b.name as nikename...  from 表名 '</span> a</div><div class="line">join(<span class="string">'select ··· from 表名 where 条件 '</span>) b on a.id = b.id where <span class="string">' a.条件 and a.条件 '</span></div><div class="line">)</div></pre></td></tr></table></figure><ol><li><blockquote><p>查询数量</p></blockquote></li></ol><p>DISIINCT = 不重复<br>as = 作为count</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rest.queryOne(<span class="string">' count(DISTINCT(a.user_id)) as count from 表名 '</span> a join(<span class="string">'select ··· from 表名 where 条件 '</span>) b on a.id = b.id</div><div class="line">join(<span class="string">'select ··· from 表名 '</span>) c on c.id = a.id where <span class="string">' a.条件 and a.条件 '</span></div><div class="line">)</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击图片，调用微信预览图片接口</span></div><div class="line">    $scope.wxPreview = <span class="function"><span class="params">u</span> =&gt;</span> &#123;</div><div class="line">      wx.previewImage(&#123;</div><div class="line">        current: location.origin + u.screen_shot,</div><div class="line">        urls: [location.origin + u.screen_shot] <span class="comment">// 需要预览的图片http链接列表</span></div><div class="line">      &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;查询结果第一种情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;从第一个表里面拿出来的数据，作为表 a，第二个表作为 b， 第三个作为 c ，a 表中不满足  b 条件被删除，然后和 c 比对 ，不满足 c 被删除，剩下的数据再根据 a 的 where  查出结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;join 代表链接&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rest.query(&lt;span class=&quot;string&quot;&gt;&#39;select * from 表名 &#39;&lt;/span&gt; a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;join(&lt;span class=&quot;string&quot;&gt;&#39;select ··· from 表名 where 条件 &#39;&lt;/span&gt;) b on a.id = b.id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;join(&lt;span class=&quot;string&quot;&gt;&#39;select ··· from 表名 &#39;&lt;/span&gt;) c on c.id = a.id where &lt;span class=&quot;string&quot;&gt;&#39; a.条件 and a.条件 &#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySql" scheme="https://shiyachuang.github.io/tags/MySql/"/>
    
  </entry>
  
</feed>
