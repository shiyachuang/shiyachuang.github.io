<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>年轻就要不停的奔跑</title>
  <icon>https://www.gravatar.com/avatar/47dc4736b429c1759a556989c257c1c6</icon>
  <subtitle>不爱代码爱妹子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shiyachuang.github.io/"/>
  <updated>2017-09-10T07:51:38.000Z</updated>
  <id>https://shiyachuang.github.io/</id>
  
  <author>
    <name>Chuang</name>
    <email>shiyachuang@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react-study</title>
    <link href="https://shiyachuang.github.io/2017/09/10/study/"/>
    <id>https://shiyachuang.github.io/2017/09/10/study/</id>
    <published>2017-09-10T07:38:20.000Z</published>
    <updated>2017-09-10T07:51:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>react首先面临的问题就是如何实现组件之间的传值，首当其冲就是父子组件之间的传值，原来是用angular开发，自从接触到react发现，更喜欢这种开发方式，感觉很舒服。<br><a id="more"></a></p></blockquote><ul><li>父组件向子组件传值比较简单的，this.props就能实现，具体实现方式为：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//子组件</span></div><div class="line"><span class="comment">//在子组件中直接用this.props.dataPlaceholder将值传递过来并且用placeholder接收</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;Input style = &#123; InputStyle &#125; placeholder=&#123;<span class="keyword">this</span>.props.dataPlaceholder&#125; onChange=&#123;<span class="keyword">this</span>.props.onChange&#125; onBlur=&#123;<span class="keyword">this</span>.props.inputOnBlur&#125;/&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> InputComponent;</div><div class="line"></div><div class="line"><span class="comment">//父组件</span></div><div class="line"><span class="comment">//父组件中定义一个名为dataPlaceholder的自定义属性</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewCouponName</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// const &#123; onChange &#125;</span></div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      &lt;div className=<span class="string">"coupon-input"</span>&gt;</div><div class="line">        &lt;span&gt;*名字&lt;<span class="regexp">/span&gt;</span></div><div class="line"><span class="regexp">        &lt;InputComponent dataPlaceholder="10个字以内" onBlur=&#123;this.inputOnBlur&#125; /</span>&gt;</div><div class="line">      &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    )</span></div><div class="line"><span class="regexp">  &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">export default NewCouponName</span></div></pre></td></tr></table></figure><ul><li>子组件想父组件传参</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//父组件</span></div><div class="line"><span class="comment">//在父组件中要写一个方法来接收子组件传过来的值</span></div><div class="line"></div><div class="line">  <span class="comment">//  接收搜索的函数</span></div><div class="line">   handleSearchValue(params)&#123;</div><div class="line">     <span class="keyword">let</span> searchData = <span class="keyword">this</span>.state.searchData;</div><div class="line">     <span class="keyword">const</span> pagination = &#123; ...this.state.pagination &#125;</div><div class="line">     <span class="keyword">this</span>.setState(&#123;</div><div class="line">       pagination:&#123;</div><div class="line">         current:<span class="number">1</span>,</div><div class="line">       &#125;,</div><div class="line">       page:<span class="number">1</span>,</div><div class="line">       searchData:&#123;</div><div class="line">         ...params,</div><div class="line">       &#125;</div><div class="line">     &#125;,()=&gt;&#123;</div><div class="line">       <span class="keyword">let</span> &#123;searchData &#125; = <span class="keyword">this</span>.state;</div><div class="line">       <span class="keyword">this</span>.getData(&#123;</div><div class="line">           pageSize: pagination.pageSize,</div><div class="line">           page: <span class="number">1</span>,</div><div class="line">           ...searchData,</div><div class="line">         &#125;);</div><div class="line">     &#125;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">  <span class="comment">//子组件</span></div><div class="line">  <span class="comment">//子组件在获取值的时候，调用父组件传过来的方法，并将获取的值传递过去</span></div><div class="line"></div><div class="line">   handleSearch = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">    e.preventDefault();</div><div class="line">    <span class="keyword">this</span>.props.form.validateFields(<span class="function">(<span class="params">err, value,</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 将子组件search文件中的值，传给父组件</span></div><div class="line">      <span class="keyword">this</span>.props.handleSearchValue(&#123;</div><div class="line">        ...values,</div><div class="line">      &#125;)</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;react首先面临的问题就是如何实现组件之间的传值，首当其冲就是父子组件之间的传值，原来是用angular开发，自从接触到react发现，更喜欢这种开发方式，感觉很舒服。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://shiyachuang.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>8月份总结</title>
    <link href="https://shiyachuang.github.io/2017/08/30/8%E6%9C%88%E6%80%BB%E7%BB%93-1/"/>
    <id>https://shiyachuang.github.io/2017/08/30/8月总结-1/</id>
    <published>2017-08-30T13:23:06.000Z</published>
    <updated>2017-09-07T02:54:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前头"><a href="#写在前头" class="headerlink" title="写在前头"></a>写在前头</h2><blockquote><p>8月份是比较忙碌的一个月，博客停止更新了一个月。</p></blockquote><p>  这个月为了完成公司的任务，疯狂写代码，解决各种bug，虽然很累但是感觉也很充实，<br>  之所以停止更新还有一个个人原因。搬了新家，住起来也比原来舒服多了。</p><a id="more"></a><p>  这是上班路上拍的一张照片，这一个月做项目，有种得心应手的感觉，antd 框架简直让我们可以提前下班，当然我觉得更好的一件事就是，对于react的理解也越来越熟练，准备把这个月的对于react的积累，全部写进博客里。</p>  <span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/2017/08/30/8月总结-1/WechatIMG34.jpeg" class="full-image" alt="alt" title="上班路上随手一拍"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><!-- <div class="note class_name"><p>Content (md partial supported) </p></div> –&gt;-->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前头&quot;&gt;&lt;a href=&quot;#写在前头&quot; class=&quot;headerlink&quot; title=&quot;写在前头&quot;&gt;&lt;/a&gt;写在前头&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;8月份是比较忙碌的一个月，博客停止更新了一个月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  这个月为了完成公司的任务，疯狂写代码，解决各种bug，虽然很累但是感觉也很充实，&lt;br&gt;  之所以停止更新还有一个个人原因。搬了新家，住起来也比原来舒服多了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6 study</title>
    <link href="https://shiyachuang.github.io/2017/07/21/ES6/"/>
    <id>https://shiyachuang.github.io/2017/07/21/ES6/</id>
    <published>2017-07-21T11:13:02.000Z</published>
    <updated>2017-09-06T16:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><h4 id="let-块级作用域"><a href="#let-块级作用域" class="headerlink" title="let 块级作用域"></a>let 块级作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">use strict</div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">   <span class="keyword">let</span>  fruit = <span class="string">'apple'</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fruit) <span class="comment">//fruit is not defined</span></div></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><h4 id="const-常量"><a href="#const-常量" class="headerlink" title="const 常量"></a>const 常量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name = <span class="string">'apple'</span></div><div class="line">name = <span class="string">'banana'</span></div><div class="line"><span class="comment">//Assignment to constant variable</span></div><div class="line"><span class="keyword">const</span> name = &#123;<span class="attr">foo</span> : <span class="string">'apple'</span> &#125;</div><div class="line">name.foo = <span class="string">'banana'</span></div><div class="line"><span class="comment">//可以正常运行</span></div></pre></td></tr></table></figure></li><li><h5 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> foo = [<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>]</div><div class="line"><span class="keyword">let</span> [one,two,three] =foo</div><div class="line"><span class="built_in">console</span>.log(one,two,three)<span class="comment">// one,two,three</span></div></pre></td></tr></table></figure></li><li><h4 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h4><p>只需保证key可以对应就行，也可只取name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>:<span class="string">'chuang'</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">'男'</span>&#125;</div><div class="line"><span class="keyword">let</span> &#123;name,age,sex&#125; = obj</div><div class="line"><span class="built_in">console</span>.log(name,age,sex)<span class="comment">//chuang 22 男</span></div></pre></td></tr></table></figure></li><li><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123; <span class="keyword">return</span> a+b &#125;</div><div class="line"><span class="comment">//当后边是表达式的时候也可以简写</span></div><div class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b</div><div class="line"><span class="comment">// 他们等同于</span></div><div class="line"><span class="keyword">let</span> add =<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a+b</div><div class="line">&#125;</div><div class="line"><span class="comment">//在回调中也可以使用</span></div><div class="line"><span class="keyword">let</span> nums =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="keyword">let</span> doublenum = num.map( <span class="function"><span class="params">i</span> =&gt;</span> i*<span class="number">2</span>)</div><div class="line"><span class="built_in">console</span>.log(doublenum)<span class="comment">//[2,3,6]</span></div></pre></td></tr></table></figure></li><li><h4 id="this-在箭头函数中的作用"><a href="#this-在箭头函数中的作用" class="headerlink" title="this 在箭头函数中的作用"></a>this 在箭头函数中的作用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> age =<span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> student = &#123;</div><div class="line">    age:<span class="number">1</span>,</div><div class="line">    grow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">           <span class="built_in">console</span>.log(++<span class="keyword">this</span>.age)</div><div class="line">       &#125;,<span class="number">100</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">student.grow()<span class="comment">//2</span></div></pre></td></tr></table></figure></li><li><h4 id="对象表达式"><a href="#对象表达式" class="headerlink" title="对象表达式"></a>对象表达式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> obj =&#123;a,b&#125;</div><div class="line"><span class="built_in">console</span>.log(obj)<span class="comment">//Object &#123;a: 1, b: 2&#125;</span></div></pre></td></tr></table></figure></li><li><h4 id="Rest参数"><a href="#Rest参数" class="headerlink" title="Rest参数"></a>Rest参数</h4><p>当一个函数的最后一参数有’…’ 这样的前缀，他会变成一个参数的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">funtion test(...args) &#123;</div><div class="line">    <span class="built_in">console</span>.log(args)</div><div class="line">&#125;</div><div class="line">test(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)<span class="comment">//[2，3，4]</span></div><div class="line">funtion test2(name,...args) &#123;</div><div class="line">    <span class="built_in">console</span>.log(args)</div><div class="line">&#125;</div><div class="line">test2(<span class="string">'chuang'</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>)<span class="comment">//[2,3,1]</span></div></pre></td></tr></table></figure></li><li><h4 id="展开操作符"><a href="#展开操作符" class="headerlink" title="展开操作符"></a>展开操作符</h4><ul><li><p>用于函数调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x,y,z</span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">let</span> args =[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">test(..args)</div></pre></td></tr></table></figure></li><li><p>用于数字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr1 =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="keyword">let</span> arr2 =[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="keyword">let</span> arr3 =[...arr1,arr2]</div><div class="line"><span class="built_in">console</span>.log(arr3)<span class="comment">//[1, 2, 3, 4, 5, 6,]</span></div></pre></td></tr></table></figure></li><li><p>对象的展开操作符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mike = &#123; <span class="attr">name</span>: <span class="string">'chuang'</span>,<span class="attr">sex</span>: <span class="string">'male'</span>&#125;</div><div class="line">mike =&#123;...mike,<span class="attr">age</span>:<span class="number">50</span>&#125;</div><div class="line"><span class="built_in">console</span>.log(mike)<span class="comment">//&#123;name: 'chuang',sex: 'male',age:50&#125;</span></div></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;let-块级作用域&quot;&gt;&lt;a href=&quot;#let-块级作用域&quot; class=&quot;headerlink&quot; title=&quot;let 块级作用域&quot;&gt;&lt;/a&gt;let 块级作用域&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;use strict&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt;  fruit = &lt;span class=&quot;string&quot;&gt;&#39;apple&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(fruit) &lt;span class=&quot;comment&quot;&gt;//fruit is not defined&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Es6" scheme="https://shiyachuang.github.io/tags/Es6/"/>
    
  </entry>
  
  <entry>
    <title>react 学习</title>
    <link href="https://shiyachuang.github.io/2017/07/15/react/"/>
    <id>https://shiyachuang.github.io/2017/07/15/react/</id>
    <published>2017-07-15T15:30:00.000Z</published>
    <updated>2017-09-06T16:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="父组件向子组件传函数"><a href="#父组件向子组件传函数" class="headerlink" title="父组件向子组件传函数"></a>父组件向子组件传函数</h4><p>定义父组件<br><a id="more"></a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React,  <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'./Test'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">UIForm</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</div><div class="line">handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(e)</div><div class="line">  &#125;</div><div class="line">  render () &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">           &lt;Test handleChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</div><div class="line">        &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">      &lt;/</span>div&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>定义子组件<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  onChange =<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.props.handleChange(e.target.value)</div><div class="line">  &#125;</div><div class="line">  render () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;(ref)</span> =&gt;</span> (this.ref = ref)&#125; onChange=&#123;(e) =&gt; this.props.handleChange(e.target.value)&#125; /&gt;</span></div><div class="line"><span class="xml">  &#125;</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;父组件向子组件传函数&quot;&gt;&lt;a href=&quot;#父组件向子组件传函数&quot; class=&quot;headerlink&quot; title=&quot;父组件向子组件传函数&quot;&gt;&lt;/a&gt;父组件向子组件传函数&lt;/h4&gt;&lt;p&gt;定义父组件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://shiyachuang.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>关于微信分享的小坑</title>
    <link href="https://shiyachuang.github.io/2017/07/13/weixin/"/>
    <id>https://shiyachuang.github.io/2017/07/13/weixin/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-09-06T16:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="WeChat-share-有关显示"><a href="#WeChat-share-有关显示" class="headerlink" title="WeChat share 有关显示"></a>WeChat share 有关显示</h4><p>在调用分享接口时，安卓部分手机可能显示有误，尝试在调用前延迟1500ms<br><a id="more"></a></p><h4 id="分享链接有关"><a href="#分享链接有关" class="headerlink" title="分享链接有关"></a>分享链接有关</h4><p>在将链接分享时 微信会自动将location.search变为分享来源代码</p><ul><li>原始链接为</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:3000/corp/#/full/try-vote-list?user=15652813691&amp;user_id=710</span></div></pre></td></tr></table></figure><ul><li>经过微信分享给朋友后</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="comment">//localhost:3000/corp/?from=singlemessage&amp;isappinstalled=0#/full/try-vote-list?user=18896817619&amp;user_id=777</span></div></pre></td></tr></table></figure><ul><li>在该页面下只改变参数进行跳转时，无效</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location.replace(<span class="string">`<span class="subst">$&#123;location.origin&#125;</span>/corp/#/full/try-vote-list?user=<span class="subst">$&#123;$scope.third&#125;</span>&amp;user_id=<span class="subst">$&#123;$scope.currentUser&#125;</span>`</span>)</div></pre></td></tr></table></figure><ul><li>解决方式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location.replace(<span class="string">`<span class="subst">$&#123;location.origin&#125;</span>/corp/<span class="subst">$&#123;location.search&#125;</span>#/full/try-vote-list?user=<span class="subst">$&#123;$scope.third&#125;</span>&amp;user_id=<span class="subst">$&#123;$scope.currentUser&#125;</span>`</span>)</div></pre></td></tr></table></figure><p>在进入该页面时，匹配到 &amp;isappinstalled=0，将其直接跳转至去除来源信息的链接</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;WeChat-share-有关显示&quot;&gt;&lt;a href=&quot;#WeChat-share-有关显示&quot; class=&quot;headerlink&quot; title=&quot;WeChat share 有关显示&quot;&gt;&lt;/a&gt;WeChat share 有关显示&lt;/h4&gt;&lt;p&gt;在调用分享接口时，安卓部分手机可能显示有误，尝试在调用前延迟1500ms&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="WeChat share" scheme="https://shiyachuang.github.io/tags/WeChat-share/"/>
    
  </entry>
  
  <entry>
    <title>angular学习</title>
    <link href="https://shiyachuang.github.io/2017/07/12/angular/"/>
    <id>https://shiyachuang.github.io/2017/07/12/angular/</id>
    <published>2017-07-11T16:23:06.000Z</published>
    <updated>2017-09-06T16:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="angular-js-学习"><a href="#angular-js-学习" class="headerlink" title="angular.js 学习"></a>angular.js 学习</h2><blockquote><p>定义class的三种方法<br><a id="more"></a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">'myApp'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">.red&#123;color: red;&#125;.red2&#123;color: #f0f;&#125;</span></div><div class="line"><span class="undefined">.red3&#123;color: #00f;&#125;.red4&#123;color: #2ff;&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>  <span class="attr">ng-class</span>=<span class="string">"&#123;&#123;red&#125;&#125;"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>  <span class="attr">ng-class</span>=<span class="string">"&#123;true: 'red', false: 'red2'&#125;[isActive]"</span>&gt;</span>222<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>  <span class="attr">ng-class</span>=<span class="string">"&#123;'red3': isSelected, 'red4': isCar&#125;"</span>&gt;</span>444<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules\angular\angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></div><div class="line"><span class="javascript">app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span></div><div class="line"><span class="javascript">$scope.red=<span class="string">"red"</span>;</span></div><div class="line"><span class="javascript">   $scope.isActive = <span class="literal">false</span>;</span></div><div class="line"><span class="javascript">    $scope.isSelected = <span class="literal">true</span>;</span></div><div class="line"><span class="javascript">    $scope.isCar = <span class="literal">false</span>;</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;angular-js-学习&quot;&gt;&lt;a href=&quot;#angular-js-学习&quot; class=&quot;headerlink&quot; title=&quot;angular.js 学习&quot;&gt;&lt;/a&gt;angular.js 学习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义class的三种方法&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://shiyachuang.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Excel 导出</title>
    <link href="https://shiyachuang.github.io/2017/07/04/excel/"/>
    <id>https://shiyachuang.github.io/2017/07/04/excel/</id>
    <published>2017-07-04T15:44:46.000Z</published>
    <updated>2017-09-06T16:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先引入Excel 模板</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> xl = <span class="built_in">require</span>(<span class="string">'excel4node'</span>);<span class="comment">//引入Excel模板</span></div></pre></td></tr></table></figure><a id="more"></a><blockquote><p>实例化工作簿</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> wb = <span class="keyword">new</span> xl.Workbook()<span class="comment">//实例化工作薄</span></div><div class="line">ler ws = wb.addWorksheet(<span class="string">'Sheet 1'</span>), <span class="comment">//实例化表</span></div></pre></td></tr></table></figure><blockquote><p>自定义style</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> styleFont = &#123;</div><div class="line">    font: &#123;</div><div class="line">      color: <span class="string">'#000000'</span>,</div><div class="line">      name: <span class="string">'宋体'</span>,</div><div class="line">      size: <span class="number">12</span></div><div class="line">    &#125;,</div><div class="line">    alignment: &#123;</div><div class="line">      horizontal: <span class="string">'center'</span></div><div class="line">    &#125;,</div><div class="line">    numberFormat: <span class="string">'#,##0'</span></div><div class="line">  &#125;;</div><div class="line"><span class="comment">//调用方法</span></div><div class="line">ws.cell(<span class="number">1</span>,<span class="number">2</span>).string(value).style(styleFont);</div></pre></td></tr></table></figure><blockquote><p>设置每列的宽度</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一行从1-7列设置宽度40</span></div><div class="line">_.range(<span class="number">1</span>, <span class="number">8</span>).forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</div><div class="line">    ws.column(++i).setWidth(<span class="number">40</span>);</div><div class="line">  &#125;)</div></pre></td></tr></table></figure><blockquote><p>thead 设置</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> head_title = [<span class="string">'ID'</span>, <span class="string">'名字'</span>, <span class="string">'电话'</span>, <span class="string">'公司'</span>, <span class="string">'新增会员数'</span>, <span class="string">'新增健康记录'</span>, <span class="string">'新增消费记录'</span>]</div><div class="line">  head_title.forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</div><div class="line">    ws.cell(<span class="number">1</span>, ++i).string(v).style(style.title);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><blockquote><p>第一行合并</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一行合并</span></div><div class="line"><span class="comment">// ws.cell(startRow, startColumn, [[endRow, endColumn], isMerged]);</span></div><div class="line"><span class="comment">//isMerged = '是否合并'</span></div><div class="line">ws.cell(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="literal">true</span>).string(titleRow).style(styleTitle);</div></pre></td></tr></table></figure><blockquote><p>last 最后一步</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'</span>);</div><div class="line"></div><div class="line">res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">`attachment; filename=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(<span class="string">'会员信息数据'</span>)&#125;</span>.xlsx`</span>);</div><div class="line"></div><div class="line">wb.writeToBuffer().then(<span class="function"><span class="params">data</span> =&gt;</span> res.send(data));</div></pre></td></tr></table></figure><hr><p><strong>参考资料</strong><br><a href="https://www.npmjs.com/package/excel4node" target="_blank" rel="external">https://www.npmjs.com/package/excel4node</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;先引入Excel 模板&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; xl = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;excel4node&#39;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//引入Excel模板&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="excel" scheme="https://shiyachuang.github.io/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>MySql 语句整理</title>
    <link href="https://shiyachuang.github.io/2017/06/22/mysql/"/>
    <id>https://shiyachuang.github.io/2017/06/22/mysql/</id>
    <published>2017-06-22T02:20:05.000Z</published>
    <updated>2017-09-06T16:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>查询结果第一种情况</p></blockquote><p><strong>从第一个表里面拿出来的数据，作为表 a，第二个表作为 b， 第三个作为 c ，a 表中不满足  b 条件被删除，然后和 c 比对 ，不满足 c 被删除，剩下的数据再根据 a 的 where  查出结果</strong></p><p>join 代表链接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rest.query(<span class="string">'select * from 表名 '</span> a</div><div class="line">join(<span class="string">'select ··· from 表名 where 条件 '</span>) b on a.id = b.id</div><div class="line">join(<span class="string">'select ··· from 表名 '</span>) c on c.id = a.id where <span class="string">' a.条件 and a.条件 '</span></div><div class="line">)</div></pre></td></tr></table></figure><a id="more"></a><blockquote><p>查询结果第二种情况</p></blockquote><p><strong>select时可以 a.属性名 b.属性名 as  name</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rest.query(<span class="string">'select a.id, b.id as auit_id, a.name, b.name as nikename...  from 表名 '</span> a</div><div class="line">join(<span class="string">'select ··· from 表名 where 条件 '</span>) b on a.id = b.id where <span class="string">' a.条件 and a.条件 '</span></div><div class="line">)</div></pre></td></tr></table></figure><ol><li><blockquote><p>查询数量</p></blockquote></li></ol><p>DISIINCT = 不重复<br>as = 作为count</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rest.queryOne(<span class="string">' count(DISTINCT(a.user_id)) as count from 表名 '</span> a join(<span class="string">'select ··· from 表名 where 条件 '</span>) b on a.id = b.id</div><div class="line">join(<span class="string">'select ··· from 表名 '</span>) c on c.id = a.id where <span class="string">' a.条件 and a.条件 '</span></div><div class="line">)</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击图片，调用微信预览图片接口</span></div><div class="line">    $scope.wxPreview = <span class="function"><span class="params">u</span> =&gt;</span> &#123;</div><div class="line">      wx.previewImage(&#123;</div><div class="line">        current: location.origin + u.screen_shot,</div><div class="line">        urls: [location.origin + u.screen_shot] <span class="comment">// 需要预览的图片http链接列表</span></div><div class="line">      &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;查询结果第一种情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;从第一个表里面拿出来的数据，作为表 a，第二个表作为 b， 第三个作为 c ，a 表中不满足  b 条件被删除，然后和 c 比对 ，不满足 c 被删除，剩下的数据再根据 a 的 where  查出结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;join 代表链接&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rest.query(&lt;span class=&quot;string&quot;&gt;&#39;select * from 表名 &#39;&lt;/span&gt; a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;join(&lt;span class=&quot;string&quot;&gt;&#39;select ··· from 表名 where 条件 &#39;&lt;/span&gt;) b on a.id = b.id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;join(&lt;span class=&quot;string&quot;&gt;&#39;select ··· from 表名 &#39;&lt;/span&gt;) c on c.id = a.id where &lt;span class=&quot;string&quot;&gt;&#39; a.条件 and a.条件 &#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySql" scheme="https://shiyachuang.github.io/tags/MySql/"/>
    
  </entry>
  
</feed>
