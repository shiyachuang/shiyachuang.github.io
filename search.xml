<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[10月总结]]></title>
    <url>%2F2017%2F10%2F29%2F10%E6%9C%88%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[10月匆匆过去了，天气也逐渐开始变冷，10月份收获了很多。交了很多的新朋友，也向了一个心仪的女生表白，虽然失败了，但是也算是对自己负责吧，也是成长，朋友让我觉得自己还不行，还需 要学习很多知识，我也渴望学到更多的东西，我也越来越看重知识付费这个了，看到了一些人很负责的去做微信公众号啊，或者自媒体，也都收获颇丰，但是我觉的我对自己帮助较大的是博客吧，写东西坚持下来不容易。最近加入了stormzhang张哥的知识星球，看到不一样的世界，他说的东西对我帮助也很大，看到他们的知识还有一些个人能力，看到理财方面的还有一些其他方面，正能量满满的。对自己11月说 “加油”！]]></content>
  </entry>
  <entry>
    <title><![CDATA[Nginx nodejs环境配置搭建（二）]]></title>
    <url>%2F2017%2F10%2F23%2Fnginx2%2F</url>
    <content type="text"><![CDATA[环境搭建好了，我们来尝试一下吧 尝试 我们首先新建一个app.js 的文件, 并把下列内容粘贴进去 sudo vi app.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253const http = require('http')const homePage =`&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset='utf-8'/&gt; &lt;title&gt;Nodejs 测试&lt;/title&gt; &lt;style type="text/css"&gt; * &#123; padding: 0; margin: 0; &#125; body &#123; padding: 30px 0; text-align: center; font-size: 16px; background: #333; &#125; h1,h2&#123; color:#fff; &#125; nav &#123; margin-top:20px; &#125; a &#123; color: #ccc; text-decoration: none; &#125; a:hover&#123; text-decoration: underline; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;年轻就要不停的奔跑&lt;/h1&gt; &lt;h2&gt;部署静态网站&lt;/h2&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;电影网站&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;个人博客&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt;&lt;/body&gt;&lt;/html&gt;`http.createServer((req,res) =&gt; &#123; res.statusCode = 200 res.setHeader = ('Content-Type', 'text/html') res.end(homePage)&#125;).listen(8081, ()=&gt; &#123; console.log('server running At port 3000')&#125;) esc :wq 保存成功，执行 node app.js 在这一步，会遇到一些问题，比如说： 端口号报错，因为防火墙的原因，此时如果你是买的ECS 服务器，那么你用手动去添加 12345678sudo vi /etc/iptables.up.rules// 80位置添加一行 -A INPUT -P tcp --dport 8081 -j ACCEPT//保存 重新载入sudo iptables-restore &lt; /etc/iptables.up.rules// 如果你是轻量云服务器，打开控制台，然后添加规则自定义 8081即可// 如果你如，你复制进去发现字体乱码sudo locale-gen zh_CN.UTF-8 en_US.UTF-8 应就OK，开浏览器ip地址:8081 使用pm2来让站点保持开启，因为已经安装过了。所以我们可以直接开始 123456pm2 start app.js // 开启pm2 list //查看列表pm2 show id //看详情pm2 reload id //重启pm2 logs id//日志，没有id就是所有日志pm2 status //查看状态 访问的时候要域名加上端口，比较麻烦，所以搭建nginx 进行反向代理用做内网域名转发 123456789101112131415161718sudo pat-get install nginx //安装Nginxnginx -v //查看版本号cd /etc/nginx //切换目录vi conf.d/text-com-8081.conf // 新建文件将下面粘贴进去upstream text &#123;server 127.0.0.1:8081;&#125;server &#123;listen 80;server_name 你的内网ip地址;location / &#123; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://text;&#125;&#125; 12// 查看配置文件看是否有 vi nginx.conf 查看有下面的一段，没有将复制进去include /etc/nginx/conf.d/*.conf; 大功告成，只是在浏览器中访问你的ip 将自动转到8081端口。 参考文档：http://www.ttlsa.com/nginx/use-nginx-proxy/]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx nodejs环境配置搭建（一）]]></title>
    <url>%2F2017%2F10%2F18%2Fnginx%2F</url>
    <content type="text"><![CDATA[最近个人买了一个阿里云的服务器，就想着做点事情，花了好久才配置好我的服务器。将自己的心得，和遇到的坑，描述一下。 服务器首先你要有一台服务器，我选的是阿里云的轻量服务器，买完就后悔了，比ECS的要贵，关键他给出的一些用起来不是特别舒服，还是喜欢自己整理和配置，最后我到最后还是用的Ubuntu 16.04进行环境的搭建。 前置的买的步骤省略，直接进入到服务器内。显示如下 1234Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-93-generic x86_64)* Documentation: https://help.ubuntu.com* Management: https://landscape.canonical.com* Support: https://ubuntu.com/advantage sudo apt-get update // 对系统更新一下，每次更新下没有毛病 在ubuntu中安装与配置zsh与oh-my-zsh (为什么要安装这个，因为好用~) ubuntu中默认安装了哪些shell 12$ cat /etc/shells # /etc/shells: valid login shells/bin/sh/bin/dash/bin/bash/bin/rbash（有sh、dash、bash和rbash） 当前正在运行的是那个版本的shell 1echo $SHELL/bin/bash 正式安装zsh、git和wget 1sudo apt-get install zsh git wget 获取并自动按照oh-my-zsh 1wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 替换bash为zsh： 1$ chsh -s /bin/zsh 最后重启：重新登录就能看舒服的shell了 1$ sudo reboot 下面我们可以一口气安装很多软件，有很多将来会用到 1sudo apt-get install vim openssl build-essential libssl-dev wget curl 安装node 还是选择n 123curl -L https://git.io/n-install | bashn v7.9.0 //我这里选择的是 安装一下cnpm有些模块 npm还是有段慢 1npm i -g cnpm 我们安装一下我们需要的模块，我这里用的cnpm 1cnpm i pm2 webapck gulp grunt-cli -g OK，现在nodejs环境以及以及OK了。]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序开发总结3]]></title>
    <url>%2F2017%2F10%2F15%2Fwx2%2F</url>
    <content type="text"><![CDATA[第二阶段的总结哈哈哈，放假回来一周，还是没怎么进入状态。。 微信小程序中的swiper是用来做轮播的，不能用来做选项卡切换。选项卡切换用到了wx:if。需要注意的地方： ①绑定的事件后可直接传入参数 ②点击切换事件： 12345clickTab(e) &#123; e = +e if (this.currentTab === e) return this.currentTab = e&#125; ③在点击切换时，相应地加载数据： 123456789async handelTab(type) &#123; type = +type if (this.currentTab === type) return this.currentTab = type this.consumptionList = [] this.optometryList = [] this.hasMore = true await this.loadData(this.id, this.currentTab, 10)&#125; 小程序没有select组件，自己做的筛选样式，详见pages/workbench/index.wpy 文字过长显示省略号，给定宽 123456.name&#123; width:100rpx; overflow: hidden; text-overflow:ellipsis; white-space: nowrap; &#125; scroll-view使用竖向滚动时，需要给一个固定高度 Wepy使用脏数据检查对setData进行封装，在函数运行周期结束时执行脏数据检查，一来可以不用关心页面多次setData是否会有性能上的问题，二来可以更加简洁去修改数据实现绑定，不用重复去写setData方法。代码如下： 1this.title = 'this is title' 但需注意，在函数运行周期之外的函数里去修改数据需要手动调用$apply方法。如： 1234setTimeout(() =&gt; &#123; this.title = 'this is title'; this.$apply();&#125;, 3000); 小程序运行命令npm run server;wepy build —-watch; 小程序没有table组件，具体详见pages/workbench/addBasicData.wpy 小程序使用了很多flex布局 wx.showToast icon只有success和loading,没有error,warning…. WePY中的methods属性只能声明页面wxml标签的bind、catch事件，不能声明自定义方法，这与Vue的用法是不一致的。 参考文档：https://wepyjs.github.io/wepy/#/]]></content>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iTerm2]]></title>
    <url>%2F2017%2F10%2F15%2Fitem2%2F</url>
    <content type="text"><![CDATA[第二阶段的总结整理使用 iTerm 2 过程中得常用快捷键，Mac 原来自带的终端工具 Terminal 不好用是出了名的，虽然最近几个版本苹果稍微做了些优化，功能上，可用性方面增强不少，无奈有个更好用的 Iterm2 摆在那，基本上也就没有多少出场机会了！ Iterm2，经常使用终端的同学肯定早就切换到这个东东上了，开源免费，和 zsh 搭配差不多已经取代 Terminal + bash 成了 Mac 上终端工具的标准配置。 列出几个常用的: 123456789101112131415161718192021标签新建标签：command + t关闭标签：command + w切换标签：command + 数字 command + 左右方向键切换全屏：command + enter查找：command + f清除当前行：ctrl + u到行首：ctrl + a到行尾：ctrl + e前进后退：ctrl + f/b (相当于左右方向键)清屏1：command + r]]></content>
      <tags>
        <tag>iTerm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序开发总结2]]></title>
    <url>%2F2017%2F09%2F30%2Fwx1%2F</url>
    <content type="text"><![CDATA[WePy 小程序框架看了一下 GitHub 上发现这个框架适合我们，而且star也不错，所以就采用了这个框架。WePY 是一款让小程序支持组件化开发的框架，通过预编译的手段让开发者可以选择自己喜欢的开发风格去开发小程序。 picker、picker-view、多列 picker 从底部弹出，不能自定义样式；多列的时候直接在picker下写数据就可以了； picker-view 可以自定义位置、高度、触发事件按钮等； 多列的时候需要在picker-view中picker-view-column标签，一个picker-view-column标签就代表一列； 在picker-view中只能picker-view-column标签，其他标签不会显示的； 多列多列是依赖于picker的，在picker中定义多个数据变化的值就可以实现多列了；比如： 12345678910&lt;picker mode="multiSelector" bindchange="bindMultiPickerChange" bindcolumnchange="bindMultiPickerColumnChange" value="&#123;&#123;multiIndex&#125;&#125;" range="&#123;&#123;multiArray&#125;&#125;"&gt; // 当前选择： &#123;&#123;multiArray[0][multiIndex[0]]&#125;&#125;， &#123;&#123;multiArray[1][multiIndex[1]]&#125;&#125;， &#123;&#123;multiArray[2][multiIndex[2]]&#125;&#125; wepy组件 将组件引入使用,组件要写在components文件下，并且类继承wepy.component； 先在父组件script标签中import引入子组件，如:(import Child from ‘./Child’)； 在js中的components下声明下子组件，给子组件一个id标识，如:(components = { ChildTag: Child })； 根据声明的子组件在相应的地方使用子组件标签，如:()；这样就可以实现子组件的引入了。 子组件与父组件之间的传参需要 先在子组件的props中定义一下参数，如:(props={ title: { type: Number, default: 50,twoWay: true }})； 在父组件中接收参数是通过子组件的attribute进行获取，如:()； 在父组件中也可以在data中设置参数的变化，如:(data = { parentTitle: ‘p-title’ })；这样就可以实现父子组件之间的传参了，虽然在项目中没有被用到，但是也体会了一下这样的传参方式； 在日历组件中有点击确定和取消的事件，点击确定时还要将选好的时间参数传递到父组件中；在wepy中有三种关于事件传递的方法，如下： $broadcast事件是由父组件发起，所有子组件都会触发事件，除非事件被手动取消； $invoke是一个组件对另一个组件的直接调用，通过传入的组件路径找到相应组件，然后再调用其方法； $emit与$broadcast正好相反，事件是由子组件发起的父组件会依次接收到$emit事件; 在日历这里我用的是$emit，因为需要子组件触发然后传到父组件；在父组件中自定义时候使用@customEvent.user绑定用户自定义组件事件，其中，@表示事件修饰符，customEvent 表示事件名称，.user表示事件后缀；目前有三种后缀： default: 绑定小程序冒泡事件事件，如bindtap； stop: 绑定小程序非冒泡事件，如catchtap； user: 绑定用户自定义组件事件，通过$emit触发； 具体实现是这样的：123456789101112131415// 子组件： 确定 handleConfirm() &#123; //点击事件 const time = this.year+ '-' + this.month + '-' + this.currentDay+ ' '+ this.currentHour+':'+ this.currentMinute this.$emit('childConfirm', time) //将事件传递给父组件 &#125;// 父组件： parentConfirm(time, e) &#123; //传递过来的事件并接收参数 this.showCalendar = false this.remindTime = '' this.currentDate = time &#125; 注：子组件传递过来的参数和父组件接收的参数的顺序是相反的，比如：子组件：this.$emit(‘childConfirm’, num, props1, props2)父组件：parentConfirm(props2, props1, num, event)前两个参数是确定的，第一个是事件名，第二个是个数字；但是我感觉第二个参数也就是num是可以不是数字的； 参考文档：https://wepyjs.github.io/wepy/#/]]></content>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序开发总结]]></title>
    <url>%2F2017%2F09%2F27%2Fwx%2F</url>
    <content type="text"><![CDATA[公司有需求要做小程序，让我事先调研一下小程序的一些基本使用，自己做了个大概的整理。 生命周期 程序周期 onLaunch：首次打开小程序时触发，只触发一次；第二次打开就不会被触发了； onShow：显示程序，从后台进入到前端的时候被触发； onHide：隐藏程序，从前端到后台的时候被触发； onError：程序发生错误或调用api错误被触发；并且会返回错误信息； 页面周期 onLoad：页面加载时被触发；只会首次渲染的时候执行一次；初始化状态； onShow：页面显示；是每次界面切换都会执行；等待激活状态；接收到页面初始化完成后就将初始化的数据发送到页面上，然后等待初始化数据渲染页面完成； onReady：页面初次加载完成；激活状态；收到初始化渲染完成后就进入激活状态正常运行，此时就会触onReady； onHide：页面隐藏；后台运行状态；从前端到后台的过程，但是该状态和激活状态是相同的，同样可以使setData来更新data数据； onUnload：页面卸载 tabBar tabBar中的list是个数组，数组内最少2个元素，最多5个； tabBar页面是需要配置tabBar的时候在list中引入该页面的路径，如果list中有什么页面tabBar就会显示显示什么页面； tabBar的跳转是通过wx.switchTab来实现的； 遇到问题：进入小程序之后先展示登录页在进入tabBar?解决方法：进入小程序展示的第一个页面是和app中的page第一个引入的页面是一致的；所以把登陆页第一个引入就可以解决该问题； 页面跳转 navigateTo：保留当前页面跳转到另一个页面，小程序对页面层数有要求，不能超过5层，所以用的时候需要十分注意； redirectTo：关闭当前页再跳转；不好的地方是当用户点击返回的时候无法回到原来的页面； reLaunch：关闭所有的页面再进行跳转；存在和 redirectTo相同的问题； switchTab：是用来跳转到tabBar页面的；跳转之前会关闭掉所有不是tabBar的页面；除switchTab可以跳转tabBar页面，使用reLaunch也可以跳转； navigateBack：关闭当前页，返回上一层的页面；]]></content>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node使用stream导出CSV]]></title>
    <url>%2F2017%2F09%2F18%2Fcsv%2F</url>
    <content type="text"><![CDATA[需求公司需求将8万条数据很快的导出，研究了一下，在老大的帮助下成功实现，记录流程希望能帮到你。 写在前面如果说你想导出Excel可以看我之前的一篇文章，有关Excel导出的。 环境 Nodejs 作为后台语言流（stream）在 Node.js 中是处理流数据的抽象接口（abstract interface）。 stream 模块提供了基础的 API 。使用这些 API 可以很容易地来构建实现流接口的对象。1const &#123;Readable&#125; = require('stream') 声明一个方法1234567891011121314151617async function genCsv(data, res) &#123; // data [&#123;id: 1, code: aaa, money: 1&#125;, &#123;id: 2, code: bbb, money: 2&#125;] let csv = new Readable async function push()&#123; csv.push(`url\n`)// 这个是表头 for (let i of data) &#123; const str = `$&#123;i.code&#125;,$&#123;i.money&#125;\n` // \n表示换行 csv.push(str) &#125; csv.push(null)// 这个表示结束 &#125; push() res.setHeader('Content-Type', 'application/csv'); res.setHeader("Content-Disposition", `attachment; filename=$&#123;encodeURIComponent('兑换码下载')&#125;.csv`); // csv.pipe(process.stdout) 结束但是这里直接返回res csv.pipe(res)&#125; export 一个方法暴露给用户，拿到参数去数据库查询。12345 export async function downloadBonusCsv(req, res, rest: WxRest) &#123; const &#123;recordId&#125; = req.query const data = await rest.query(`select id, code, money/100 as money from bonus where record_id = $&#123;recordId&#125;`); return genCsv(data, res)&#125; 到这里就大功告成了。 参考文档：http://nodejs.cn/api/]]></content>
      <tags>
        <tag>csv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC全栈环境配置]]></title>
    <url>%2F2017%2F09%2F15%2Fmac%2F</url>
    <content type="text"><![CDATA[关于公司新来了一个妹子，公司新买了一台电脑帮她做环境，总结了一下，写出一篇文章，希望能帮到你。 通用软件HomeBrew拿到一台新的MAC，首先推荐安装HomeBrew。HomeBrew是Mac下面的一个包管理器，方便我们安装一些Mac OS没有的UNIX工具、软件。 1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 将以上命令粘贴至终端。确保正常安装之后，可以输入brew -h查看帮助： 1234567891011121314151617181920 Example usage: brew [info | home | options ] [FORMULA...] brew install FORMULA... brew uninstall FORMULA... brew search [foo] brew list [FORMULA...] brew update brew upgrade [FORMULA...] brew pin/unpin [FORMULA...]Troubleshooting: brew doctor brew install -vd FORMULA brew [--env | config]Brewing: brew create [URL [--no-fetch]] brew edit [FORMULA...] https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Formula-Cookbook.mdFurther help: man brew brew home 使用HomeBrew搜索一个包，在不确定想要安装的包是否有之前，建议先搜索一下，执行下面命令：1brew search mongod 安装包，在搜索到想要安装的包之后，执行下面命令即可安装：1brew install mongod 查看安装过的包列表：1brew list 更新HomeBrew在服务端的包结构：1brew update 卸载安装包:1brew uninstall mongod item2工欲善其事，必先利其器。iTerm2是Mac系统的独有终端工具. 首先下载iterm2  http://www.iterm2.com 安装oh my zsh 1sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" 当然是安装node了，首选tj大神的n 1curl -L https://git.io/n-install | bash 使用方法: 列出了几种 12345- n atest // 安装最新版本- n // 切换node版本- n ls // 列出所有可以安装的版本- n stable// 安装稳定版本- n rm 8.0// 删除某个版本 npm淘宝镜像 1vim ~/ .npmrc registry=http://registry.npm.taobao.org 参考文档：https://mac.aotu.io/index.html]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react-study]]></title>
    <url>%2F2017%2F09%2F10%2Fstudy%2F</url>
    <content type="text"><![CDATA[react首先面临的问题就是如何实现组件之间的传值，首当其冲就是父子组件之间的传值，原来是用angular开发，自从接触到react发现，更喜欢这种开发方式，感觉很舒服。 父组件向子组件传值比较简单的，this.props就能实现，具体实现方式为： 1234567891011121314151617181920212223242526272829//子组件//在子组件中直接用this.props.dataPlaceholder将值传递过来并且用placeholder接收class InputComponent extends Component &#123; render() &#123; return( &lt;Input style = &#123; InputStyle &#125; placeholder=&#123;this.props.dataPlaceholder&#125; onChange=&#123;this.props.onChange&#125; onBlur=&#123;this.props.inputOnBlur&#125;/&gt; ) &#125;&#125;export default InputComponent;//父组件//父组件中定义一个名为dataPlaceholder的自定义属性class NewCouponName extends Component &#123; render() &#123; // const &#123; onChange &#125; return( &lt;div className="coupon-input"&gt; &lt;span&gt;*名字&lt;/span&gt; &lt;InputComponent dataPlaceholder="10个字以内" onBlur=&#123;this.inputOnBlur&#125; /&gt; &lt;/div&gt; ) &#125;&#125;export default NewCouponName 子组件想父组件传参 1234567891011121314151617181920212223242526272829303132333435363738394041//父组件//在父组件中要写一个方法来接收子组件传过来的值 // 接收搜索的函数 handleSearchValue(params)&#123; let searchData = this.state.searchData; const pagination = &#123; ...this.state.pagination &#125; this.setState(&#123; pagination:&#123; current:1, &#125;, page:1, searchData:&#123; ...params, &#125; &#125;,()=&gt;&#123; let &#123;searchData &#125; = this.state; this.getData(&#123; pageSize: pagination.pageSize, page: 1, ...searchData, &#125;); &#125;); &#125; //子组件 //子组件在获取值的时候，调用父组件传过来的方法，并将获取的值传递过去 handleSearch = (e) =&gt; &#123; e.preventDefault(); this.props.form.validateFields((err, value,) =&gt; &#123; if (err) &#123; return; &#125; // 将子组件search文件中的值，传给父组件 this.props.handleSearchValue(&#123; ...values, &#125;) &#125;); &#125;]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[8月份总结]]></title>
    <url>%2F2017%2F08%2F30%2F8%E6%9C%88%E6%80%BB%E7%BB%93-1%2F</url>
    <content type="text"><![CDATA[写在前头 8月份是比较忙碌的一个月，博客停止更新了一个月。 这个月为了完成公司的任务，疯狂写代码，解决各种bug，虽然很累但是感觉也很充实， 之所以停止更新还有一个个人原因。搬了新家，住起来也比原来舒服多了。 这一个月做项目，有种得心应手的感觉，antd 框架简直让我们可以提前下班，当然我觉得更好的一件事就是，对于react的理解也越来越熟练，准备把这个月的对于react的积累，全部写进博客里。]]></content>
  </entry>
  <entry>
    <title><![CDATA[ES6]]></title>
    <url>%2F2017%2F07%2F21%2FES6%2F</url>
    <content type="text"><![CDATA[我一般会在周末更新一篇文章，不一定会是什么，有时候心血来潮就去看一些东西，别人写的ES6我可能觉得不太好，或者我用着不太方便，我就自己写我自己的、只是加强一边记忆而已。 let 块级作用域123456use strictif(true) &#123; let fruit = 'apple'&#125;console.log(fruit) //fruit is not defined const 常量123456const name = 'apple'name = 'banana'//Assignment to constant variableconst name = &#123;foo : 'apple' &#125;name.foo = 'banana'//可以正常运行 解构数组123let foo = ['one','two','three']let [one,two,three] =fooconsole.log(one,two,three)// one,two,three 解构对象只需保证key可以对应就行，也可只取name 123let obj = &#123; name:'chuang',age:22,sex:'男'&#125;let &#123;name,age,sex&#125; = objconsole.log(name,age,sex)//chuang 22 男 箭头函数1234567891011let add = (a,b) =&gt; &#123; return a+b &#125;//当后边是表达式的时候也可以简写let add = (a,b) =&gt; a+b// 他们等同于let add =function(a,b)&#123; return a+b&#125;//在回调中也可以使用let nums =[1,2,3]let doublenum = num.map( i =&gt; i*2)console.log(doublenum)//[2,3,6] this 在箭头函数中的作用12345678910let age =2;let student = &#123; age:1, grow: function() &#123; setTimeout(() =&gt; &#123; console.log(++this.age) &#125;,100) &#125;&#125;student.grow()//2 对象表达式123let a=1,b=2;let obj =&#123;a,b&#125;console.log(obj)//Object &#123;a: 1, b: 2&#125; Rest参数当一个函数的最后一参数有’…’ 这样的前缀，他会变成一个参数的数组 12345678funtion test(...args) &#123; console.log(args)&#125;test(2,3,4)//[2，3，4]funtion test2(name,...args) &#123; console.log(args)&#125;test2('chuang',2,3,1)//[2,3,1] 展开操作符 用于函数调用 123function test(x,y,z) &#123;&#125;let args =[0,1,2]test(..args) 用于数字面量 1234let arr1 =[1,2,3]let arr2 =[4,5,6]let arr3 =[...arr1,arr2]console.log(arr3)//[1, 2, 3, 4, 5, 6,] 对象的展开操作符 123let mike = &#123; name: 'chuang',sex: 'male'&#125;mike =&#123;...mike,age:50&#125;console.log(mike)//&#123;name: 'chuang',sex: 'male',age:50&#125;]]></content>
      <tags>
        <tag>Es6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react demo]]></title>
    <url>%2F2017%2F07%2F15%2Freact%2F</url>
    <content type="text"><![CDATA[子组件调用父组件函数可能是最简单的一个函数了，如果有时间我会写两个稍微更好的例子。子组件调用父子间的函数，并把值传给父组件定义父组件 123456789101112131415import React, from 'react'import Test from './Test'export default class Father extends Component&#123;handleChange = (val) =&gt; &#123; console.log(val) &#125; render () &#123; return ( &lt;div&gt; &lt;Test handleChange&#123;this.handleChange /&gt; &lt;/div&gt; ) &#125;&#125; 定义子组件12345678910export default class Test extends Component &#123; onChange =(e) =&gt; &#123; // 获取输入框的值 e.target.value，将值传给父组件 this.props.handleChange(e.target.value) &#125; render () &#123; return &lt;input onChange=&#123;this.onChange&#125; /&gt; &#125;&#125;]]></content>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于微信分享的小坑]]></title>
    <url>%2F2017%2F07%2F13%2Fweixin%2F</url>
    <content type="text"><![CDATA[WeChat share 有关显示在调用分享接口时，安卓部分手机可能显示有误，尝试在调用前延迟1500ms 分享链接有关在将链接分享时 微信会自动将location.search变为分享来源代码 原始链接为 1http://localhost:3000/corp/#/full/try-vote-list?user=15652813691&amp;user_id=710 经过微信分享给朋友后 1http://localhost:3000/corp/?from=singlemessage&amp;isappinstalled=0#/full/try-vote-list?user=18896817619&amp;user_id=777 在该页面下只改变参数进行跳转时，无效 1location.replace(`$&#123;location.origin&#125;/corp/#/full/try-vote-list?user=$&#123;$scope.third&#125;&amp;user_id=$&#123;$scope.currentUser&#125;`) 解决方式 1location.replace(`$&#123;location.origin&#125;/corp/$&#123;location.search&#125;#/full/try-vote-list?user=$&#123;$scope.third&#125;&amp;user_id=$&#123;$scope.currentUser&#125;`) 在进入该页面时，匹配到 &amp;isappinstalled=0，将其直接跳转至去除来源信息的链接]]></content>
      <tags>
        <tag>WeChat share</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[angular整理]]></title>
    <url>%2F2017%2F07%2F12%2Fangular%2F</url>
    <content type="text"><![CDATA[angular.js 学习 定义class的三种方法 1234567891011121314151617181920212223&lt;html ng-app='myApp'&gt;&lt;head&gt;&lt;style&gt;.red&#123;color: red;&#125;.red2&#123;color: #f0f;&#125;.red3&#123;color: #00f;&#125;.red4&#123;color: #2ff;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body ng-controller="myCtrl"&gt; &lt;p ng-class="&#123;&#123;red&#125;&#125;"&gt;111&lt;/p&gt; &lt;p ng-class="&#123;true: 'red', false: 'red2'&#125;[isActive]"&gt;222&lt;/p&gt; &lt;p ng-class="&#123;'red3': isSelected, 'red4': isCar&#125;"&gt;444&lt;/p&gt;&lt;script src="node_modules\angular\angular.min.js"&gt;&lt;/script&gt;&lt;script&gt; var app = angular.module('myApp', []); app.controller('myCtrl', function($scope) &#123; $scope.red="red"; $scope.isActive = false; $scope.isSelected = true; $scope.isCar = false; &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel 导出]]></title>
    <url>%2F2017%2F07%2F04%2Fexcel%2F</url>
    <content type="text"><![CDATA[先引入Excel 模板 1const xl = require('excel4node');//引入Excel模板 实例化工作簿 12let wb = new xl.Workbook()//实例化工作薄ler ws = wb.addWorksheet('Sheet 1'), //实例化表 自定义style 12345678910111213 const styleFont = &#123; font: &#123; color: '#000000', name: '宋体', size: 12 &#125;, alignment: &#123; horizontal: 'center' &#125;, numberFormat: '#,##0' &#125;;//调用方法ws.cell(1,2).string(value).style(styleFont); 设置每列的宽度 1234//第一行从1-7列设置宽度40_.range(1, 8).forEach((v, i) =&gt; &#123; ws.column(++i).setWidth(40); &#125;) thead 设置 1234const head_title = ['ID', '名字', '电话', '公司', '新增会员数', '新增健康记录', '新增消费记录'] head_title.forEach((v, i) =&gt; &#123; ws.cell(1, ++i).string(v).style(style.title); &#125;); 第一行合并 1234// 第一行合并// ws.cell(startRow, startColumn, [[endRow, endColumn], isMerged]);//isMerged = '是否合并'ws.cell(1, 1, 1, 15, true).string(titleRow).style(styleTitle); last 最后一步 12345res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');res.setHeader("Content-Disposition", `attachment; filename=$&#123;encodeURIComponent('会员信息数据')&#125;.xlsx`);wb.writeToBuffer().then(data =&gt; res.send(data)); 参考资料https://www.npmjs.com/package/excel4node]]></content>
      <tags>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySql 语句整理]]></title>
    <url>%2F2017%2F06%2F22%2Fmysql%2F</url>
    <content type="text"><![CDATA[查询结果第一种情况 从第一个表里面拿出来的数据，作为表 a，第二个表作为 b， 第三个作为 c ，a 表中不满足 b 条件被删除，然后和 c 比对 ，不满足 c 被删除，剩下的数据再根据 a 的 where 查出结果 join 代表链接 1234rest.query('select * from 表名 ' ajoin('select ··· from 表名 where 条件 ') b on a.id = b.idjoin('select ··· from 表名 ') c on c.id = a.id where ' a.条件 and a.条件 ') 查询结果第二种情况 select时可以 a.属性名 b.属性名 as name 123rest.query('select a.id, b.id as auit_id, a.name, b.name as nikename... from 表名 ' ajoin('select ··· from 表名 where 条件 ') b on a.id = b.id where ' a.条件 and a.条件 ') 查询数量 DISIINCT = 不重复as = 作为count 123rest.queryOne(' count(DISTINCT(a.user_id)) as count from 表名 ' a join('select ··· from 表名 where 条件 ') b on a.id = b.idjoin('select ··· from 表名 ') c on c.id = a.id where ' a.条件 and a.条件 ') 1234567//点击图片，调用微信预览图片接口 $scope.wxPreview = u =&gt; &#123; wx.previewImage(&#123; current: location.origin + u.screen_shot, urls: [location.origin + u.screen_shot] // 需要预览的图片http链接列表 &#125;); &#125;]]></content>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
</search>
